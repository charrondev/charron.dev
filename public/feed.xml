<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Charron Dev Blog]]></title>
        <description><![CDATA[Charron Dev Blog]]></description>
        <link>https://charron.dev</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Mon, 05 Jun 2023 07:04:14 GMT</lastBuildDate>
        <atom:link href="https://charron.dev/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Choosing a new Rich Text Editor in 2022]]></title>
            <description><![CDATA[A few years ago I joined Vanilla Forums and shortly after was tasked with replacing our aging text editor. I dove in and determined QuillJS was the best choice…]]></description>
            <link>/posts/chossing-a-new-rich-text-editor-in-2022</link>
            <guid isPermaLink="false">chossing-a-new-rich-text-editor-in-2022</guid>
            <category><![CDATA[contenteditable]]></category>
            <category><![CDATA[QuillJS]]></category>
            <category><![CDATA[Parchment]]></category>
            <category><![CDATA[SlateJS]]></category>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Sun, 25 Sep 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
<p>
  A few years ago I joined Vanilla Forums and shortly after was tasked with replacing our aging text editor.
  I dove in and determined QuillJS was the best choice at the time. It was an active open source project and
  while it had a few warts it seemed liked they could be worked around. We built our new "Rich Editor" project
  and it has served us pretty well for a few years.
</p>
<h2>Background</h2>
<p>
  In 2017 the QuillJS author had a posted a https://medium.com/@jhchen/the-state-of-quill-and-2-0-fb38db7a59b9
  a plan to get the project to it's 2.0 release with a few much awaited features.
</p>
<p>We developed many improvements on top of the base QuillJS editor including:</p>
<ul>
  <li>A rich embedding system for embedding external documents.</li>
  <li>Nested list support.</li>
  <li>Support for custom multi-line blocks.</li>
  <li>Fixes for numerous keyboard traps.</li>
  <li>Markdown-like shortcuts.</li>
  <li>Mentions.</li>
  <li>Floating inline and block formatting UI.</li>
</ul>
<p>
  As we neared our launch I reached out to the project maintainer expressing a desire to upstream some patches and expressed
  a desire to assist in triaging the projects public issue tracker which had grown to a sizeable amount.
</p>
<p>
  I was astounded to find the next week that my email had been ignored and that I was then blocked from commenting on the public issue tracker. In the following months things became clearer though. The maintainer had started a new company <a href="https://slab.com/">Slab</a> which
  sold help desk software that competed with our products. Over the next 5 years, QuillJS would continue to receive patches to its <code>master</code>
  branch, but no additional releases, release notes, or migration instructions were ever provided.
</p>
<h2>Fast forward to 2022</h2>
<p>
  One of the main features waiting in QuillJS 2.0 was going to be support for tables. We'd deferred our implementation of such a feature
  expecting that <em>eventually</em> the project would make a release. Still, requests from our customers had mounted singificantly over the years.
</p>
<p>
  The lack of public stewardship of Quill, poor documentation, and a very risky future forced me to evaluate other options.
  It would be simpler to start again, with another project and migrate our existing posts to a new format than to proceed forwards with Quill.
</p>
<h2>Evaluating the current landscape of <code>contenteditable</code> editors.</h2>
<p>Today there are a plethora of options to consider.</p>
<h3>TinyMCE (OSS)</h3>
<p>TinyMCE has stood the test of time and has a sustainable business model to drive development of their open source editor.</p>
<p>Notably thought the open source version of TinyMCE is <strong><em>missing</em></strong> some key feature we would have to re-impement.</p>
<ul>
  <li>Rich Media Embeds.</li>
  <li>Mentions.</li>
  <li>PowerPaste (Pasting from MS Word or Excel).</li>
</ul>
<p>Still, TinyMCE's staying power and wide community use put it pretty high on the list.</p>
<h3>TinyMCE (Enterprise/self-hosted)</h3>
<p>
  Those missing features from the OSS version <em>are</em> present in the premium version. As a successful SaaS company we have
  the budget to license the full version of the product for our cloud sites. I booked a call with a salespereson from Tiny
  and found a few blockers:
</p>
<ul>
  <li>
    The pricing scales with the number of customers we gain and is static per use. This means for smaller customers TinyMCE licensing
    is disproportionate to the price of their plan with us. The quoted price was estimated to cost more roughly 1 intermediate developer's yearly salary.
  </li>
  <li>
    The built-in media embed plugin was not configurable enough for our use case, and we would not be provided with the source of the plugin.
    As a result we would have to re-implement this plugin blindly even though we were paying for it.
  </li>
  <li>
    The self hosting seemed to be fairly more complicated than using a javascript library should be, requiring hosting additional servers
    in our production environment.
  </li>
</ul>
<h3>SlateJS</h3>
<p>
  SlateJS is the technology I <strong><em>wanted</em></strong> to go with in 2017, but at the time it had a <code>0.0x</code> version number, with no 1.0 in site.
  Additionally it was tech maintained by a competitor of ours and had a very uncertain future.
</p>
<p>In the end it's document model seemed very smart though, and it was React based which aligned well with our stack.</p>
<p>
  Since then SlateJS has gone through numerous versions and many breaking changes, but is on a path to stability.
  It's document has matured and seems mostly finalized, and the open source community around it seems very active, in particular with the <a href="https://plate.udecode.io/docs/playground">PlateJS set of plugins</a>.
</p>
<p>Going forwards I'll be rebuilding our editor on Slate and Plate and documenting my findings on my blog.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[PHP for Javascript Developers - Runtime]]></title>
            <description><![CDATA[This is part 2 of a multi-part series of posts. You can read the first part, PHP for Javascript Developers - Syntax, here. 

This post covers some of the runti…]]></description>
            <link>/posts/php-for-javscript-developers-runtime</link>
            <guid isPermaLink="false">php-for-javscript-developers-runtime</guid>
            <category><![CDATA[PHP]]></category>
            <category><![CDATA[Javascript]]></category>
            <category><![CDATA[Typescript]]></category>
            <category><![CDATA[Guide]]></category>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Tue, 19 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
<p><em>This is part 2 of a multi-part series of posts. You can read the first part, <a href="/posts/php-for-javscript-developers-syntax">PHP for Javascript Developers - Syntax, here</a>.</em></p>
<p>This post covers some of the runtime differences between PHP and javascript and equivalent parts of each languages standard library.</p>
<p>It's worth noting that PHP has an extensive standard library, far larger than common in javascript. For example, PHP has classes for many common data structures, extensive utilities for data manipulation, official extensions for database connections, file-handling, network requests, and more.</p>
<h2>Built-in string utilities</h2>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"someStr"</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">,</span> <span class="token string">"replacement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"someStr"</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">regex</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"replacement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> matches <span class="token operator">=</span> <span class="token string">"someStr"</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">regex</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> pieces <span class="token operator">=</span> <span class="token string">"someStr"</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token string">"someStr"</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> trimmed <span class="token operator">=</span> <span class="token string">"  someStr \n"</span><span class="token punctuation">.</span><span class="token method function property-access">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> boolResult <span class="token operator">=</span> <span class="token string">"someStr"</span><span class="token punctuation">.</span><span class="token method function property-access">endsWith</span><span class="token punctuation">(</span><span class="token string">"Str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> boolResult <span class="token operator">=</span> <span class="token string">"someStr"</span><span class="token punctuation">.</span><span class="token method function property-access">startsWith</span><span class="token punctuation">(</span><span class="token string">"some"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> boolResult <span class="token operator">=</span> <span class="token string">"someStr"</span><span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span><span class="token string">"eSt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> lower <span class="token operator">=</span> <span class="token string">"someStr"</span><span class="token punctuation">.</span><span class="token method function property-access">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> upper <span class="token operator">=</span> <span class="token string">"someStr"</span><span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"search"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"replacement"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"someStr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/regex/"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"replacement"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"someStr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/regex/"</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pieces</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">","</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"someStr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"someStr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Optionally specify characters to trim.</span>
<span class="token variable">$trimmed</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"  someStr \n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">" \t\n\r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$boolResult</span> <span class="token operator">=</span> <span class="token function">str_ends_with</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"someStr"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$boolResult</span> <span class="token operator">=</span> <span class="token function">str_starts_with</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"someStr"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"some"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$boolResult</span> <span class="token operator">=</span> <span class="token function">str_contains</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"someStr"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"mSt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$lower</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"someStr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$upper</span> <span class="token operator">=</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"someStr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2>Built-in numeric utilities</h2>
<pre class="language-js"><code class="language-js"><span class="token known-class-name class-name">Number</span><span class="token punctuation">.</span><span class="token method function property-access">isFinite</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token known-class-name class-name">Number</span><span class="token punctuation">.</span><span class="token method function property-access">isInteger</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">!</span><span class="token known-class-name class-name">Number</span><span class="token punctuation">.</span><span class="token method function property-access">isInteger</span><span class="token punctuation">(</span><span class="token number">100.52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token known-class-name class-name">Number</span><span class="token punctuation">.</span><span class="token method function property-access">parseInt</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token known-class-name class-name">Number</span><span class="token punctuation">.</span><span class="token method function property-access">parseFloat</span><span class="token punctuation">(</span><span class="token string">"100.42"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token function">is_finite</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">is_integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">is_float</span><span class="token punctuation">(</span><span class="token number">100.52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">intval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">floatval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"100.42"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2>Built-in array utilities</h2>
<pre class="language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> strJoined <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> mergedArray <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr3<span class="token punctuation">,</span> arr4<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> boolResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span><span class="token string">"someVal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> mapped <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> filtered <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> nextValue</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> found <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"newItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span><span class="token string">"newItemAtStart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> lastItem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> firstItem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reversed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> someMatches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> allMatch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$index</span> <span class="token operator">=></span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token variable">$strJoined</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">", "</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$mergedArray</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$arr1</span><span class="token punctuation">,</span> <span class="token variable">$arr2</span><span class="token punctuation">,</span> <span class="token variable">$arr3</span><span class="token punctuation">,</span> <span class="token variable">$arr4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$mergedArray</span> <span class="token operator">=</span> <span class="token variable">$arr4</span> <span class="token operator">+</span> <span class="token variable">$arr3</span> <span class="token operator">+</span> <span class="token variable">$arr2</span> <span class="token operator">+</span> <span class="token variable">$arr1</span><span class="token punctuation">;</span>
<span class="token variable">$boolResult</span> <span class="token operator">=</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"someVal"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3rd param for strict equality.</span>
<span class="token variable">$modified</span> <span class="token operator">=</span> <span class="token function">array_splice</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$sorted</span> <span class="token operator">=</span> <span class="token function">usort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$mapped</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$filtered</span> <span class="token operator">=</span> <span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$reduced</span> <span class="token operator">=</span> <span class="token function">array_reduce</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$accumulator</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// No equivalent to JS [].search()</span>
<span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"newItemAtEnd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$arr</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string double-quoted-string">"val1"</span><span class="token punctuation">;</span>
<span class="token function">array_unshift</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"newItemAtStart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$lastItem</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$firstItem</span> <span class="token operator">=</span> <span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$reversed</span> <span class="token operator">=</span> <span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$someMatches</span> <span class="token operator">=</span> <span class="token function">iterable_any</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// RFC https://wiki.php.net/rfc/any_all_on_iterable</span>
<span class="token variable">$allMatch</span> <span class="token operator">=</span> <span class="token function">iterable_some</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// RFC https://wiki.php.net/rfc/any_all_on_iterable</span>
</code></pre>
<h2>Built-in object utilities</h2>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">"val"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> merged <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>stdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"val"</span><span class="token punctuation">;</span>
<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$keys</span> <span class="token operator">=</span> <span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span> <span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Manges private and protected keys.</span>
<span class="token variable">$keys</span> <span class="token operator">=</span> <span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gets properties based on current access level.</span>
<span class="token variable">$keys</span> <span class="token operator">=</span> <span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$values</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span> <span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Manges private and protected keys.</span>
<span class="token variable">$values</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gets properties based on current access level.</span>
<span class="token variable">$values</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$entries</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span> <span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Manges private and protected keys.</span>
<span class="token variable">$entries</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gets properties based on current access level.</span>
<span class="token variable">$entries</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$merged</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">object</span><span class="token punctuation">)</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span> <span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span> <span class="token variable">$obj2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Manges private and protected keys. Lossy (will be \stdClass at end).</span>
<span class="token variable">$merged</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">object</span><span class="token punctuation">)</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$obj2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gets properties based on current access level. Lossy (will be \stdClass at end).</span>
<span class="token variable">$merged</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$arr2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2>Breaking Code into Multiple Files</h2>
<p>Javascript and PHP both offer methods of splitting items into multiple files.</p>
<h3>ES Modules</h3>
<p>For javascript this is ES Modules.</p>
<p>
  For browser code, it is quite common to use some build-time tool to like webpack to link all the files together.
  Modern browsers are able to do this without a build-time tool, but this is not widely supported.
</p>
<p><strong>a.js</strong></p>
<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre>
<p><strong>b.js</strong></p>
<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> funcA <span class="token punctuation">}</span> <span class="token keyword module">from</span> <span class="token string">"./a.js"</span><span class="token punctuation">;</span>
</code></pre>
<h3>PHP require &#x26; include</h3>
<p>The most basic form of splitting PHP code is using either <code>require</code> or <code>include</code>.</p>
<p>All of these:</p>
<ul>
  <li>Locate the requested file.</li>
  <li>Parse it.</li>
  <li>Execute the top level code.</li>
  <li>If the are any symbols declared (like a function of class), these will become available for the rest of the duration of the runtime.</li>
</ul>
<pre class="language-php"><code class="language-php"><span class="token comment">// Fatal error if the file does not exist.</span>
<span class="token keyword">require</span> <span class="token string double-quoted-string">"./fileA.php"</span><span class="token punctuation">;</span>

<span class="token comment">// Fatal error if the file does not exist.</span>
<span class="token comment">// Does nothing if the file has already been required.</span>
<span class="token keyword">require_once</span> <span class="token string double-quoted-string">"./fileA.php"</span><span class="token punctuation">;</span>

<span class="token comment">// Warning if the file does not exist.</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"./fileA.php"</span><span class="token punctuation">;</span>

<span class="token comment">// Warning if the file does not exist.</span>
<span class="token comment">// Does nothing if the file has already been required.</span>
<span class="token keyword">include_once</span> <span class="token string double-quoted-string">"fileB.php"</span><span class="token punctuation">;</span>
</code></pre>
<p>There are some major downsides to manually managing includes though:</p>
<ul>
  <li>If a try to use a symbol from a file that hasn't been included yet, it will generate a fatal error.</li>
  <li>You end up essentially needing to manage 1 giant list of files at the start of your program.</li>
</ul>
<h3>PHP Autoloading</h3>
<p>Since PHP 5.1 a feature called class autoloading was added. This works <strong>only for classes and not functions</strong> and as a result PHP developers tend to use classes and methods on those classes instead of functions.</p>
<p>The way it works, is the language has a few places that may try to instantiate a class, check it's existance, or find out various properties about it. The language will then check for various for programmer defined functions called autoloaders. It will call each autoloader it finds, pass them the name of the requested class, and allow it to do whatever it needs to to (most commonly locating the file with that class on the filesytem, and requiring or including it).</p>
<p>Autoloaders are registered through a method called <code>spl_autoload_register()</code>.</p>
<p>A PHP program can become organized like this.</p>
<pre class="language-php"><code class="language-php"><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$className</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Try to load the class from somewhere.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Application will get loaded from the autoloader.</span>
<span class="token comment">// Any classes that it uses will then get autoloaded as well.</span>
<span class="token scope">Application<span class="token punctuation">::</span></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3>Composer</h3>
<p><a href="https://getcomposer.org/">Composer</a> is a commonly used tool for PHP developers. You can think of it as a mix between NPM/yarn and webpack.</p>
<ul>
  <li>It is a dependency manager. It fetches packages from somewhere (a registry, a github repo, the filesystem) and links them into a <code>/vendor</code> directory.</li>
  <li>It tracks dependencies in a <code>composer.json</code> file (similar to <code>package.json</code>) and keeps a lockfile <code>composer.lock</code> (similar to NPM's <code>package-lock.json</code> or yarn's <code>yarn.lock</code> file).</li>
  <li>It generates an efficient class autoloader for all of the vendored dependencies.</li>
  <li>It allows you to specify for patterns for locating PHP files based on class names in the <code>composer.json</code> file.</li>
  <li>It generates an autoloader for your own classes.</li>
</ul>
<p>With composer to the structure of PHP program then becomes more like</p>
<pre class="language-php"><code class="language-php"><span class="token keyword">require_once</span> <span class="token string double-quoted-string">"./vendor/autoload.php"</span><span class="token punctuation">;</span>

<span class="token comment">// Application will get loaded from the autoloader.</span>
<span class="token comment">// Any classes that it uses will then get autoloaded as well.</span>
<span class="token scope">Application<span class="token punctuation">::</span></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>You can have multiple autoloaders in a PHP program, so it's still possible to register your own as well.</p>
<h3>PSR-0 and PSR-4</h3>
<p>PHP has had 2 defined standards for organizing files and autoloading them, both based on namespaces. Composer supports generating autoloaders for both of these structures.</p>
<p><a href="https://www.php-fig.org/psr/psr-0/">PSR-0</a>(now deprecated) worked with classes before the introduction of the namespace feature of the language. It's mapping worked like this.</p>
<ul>
  <li><code>Piece_Of_NameSpace_ClassName</code> -> <code>/root/Piece/Of/NameSpace/ClassName.php</code></li>
</ul>
<p><a href="https://www.php-fig.org/psr/psr-4/">PSR-4</a> maps to the file system according to the <code>\</code> character in the namespaces.</p>
<ul>
  <li><code>Piece\Of\NameSpace\ClassName</code> -> <code>/root/Piece/Of/NameSpace/ClassName.php</code></li>
</ul>
<h2>Async</h2>
<p>Unlike Javascript and some other languages, PHP does not have built-in support for powerful asyncronous primitives such as Promises, Futures, async/await etc. Instead almost all functions and methods in the PHP standard libary are blocking.</p>
<p>Instead PHP web servers often run muliple PHP processes at the same time. PHP's build in php-fpm module is one example.</p>
<p>In a web-server like node, you often run in a single event loop handling multiple requests at the same time. As a result it's a bad idea to block the entire process to wait for something like a file from the filesystem, results from the database, or network request. As a the primitives offered in javascript runtimes are often asyncronous, working heavily with callbacks and promises.</p>
<p>Additionally web servers in javascript (or languages like java, C#, etc) tend to start up once, and continue running for a long period of time, handling numerous requests to the same process.</p>
<p>PHP-FPM runs in a different model. Instead every request spins up a fresh process, with no initialized state, with multiple processes running in parallel.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[PHP for Javascript Developers - Syntax]]></title>
            <description><![CDATA[This is part 1 of a multi-part series of posts. You can read the second part, PHP for Javascript Developers - Runtime, here. Foreword 

 A few years ago I star…]]></description>
            <link>/posts/php-for-javscript-developers-syntax</link>
            <guid isPermaLink="false">php-for-javscript-developers-syntax</guid>
            <category><![CDATA[PHP]]></category>
            <category><![CDATA[Javascript]]></category>
            <category><![CDATA[Typescript]]></category>
            <category><![CDATA[Guide]]></category>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Tue, 19 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
<p><em>This is part 1 of a multi-part series of posts. You can read the second part, <a href="/posts/php-for-javscript-developers-runtime">PHP for Javascript Developers - Runtime, here</a>.</em></p>
<h2>Foreword</h2>
<p>
  A few years ago I started as frontend developer at <a href="https://vanillaforums.com">Vanilla Forums</a>
  knowing only frontend technologies like Javascript, Typescript, CSS, and HTML.
</p>
<p>
  I've grown a lot as a developer since then, and a large part of that was becoming familiar with
  backend technologies like PHP &#x26; MySQL. Recently a colleague asked for a resource to be quickly get familiar
  with PHP. I searched around and didn't find the existing resources sufficient, so I've decided to start writing
  a series of posts on quickly picking up PHP from the perspective of a frontend developer.
</p>
<p>This series assumes solid prior knowledge of javascript.</p>
<h2>Variables</h2>
<p>The following are equivalent.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> myStr <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myStr2 <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myBool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myInt <span class="token operator">=</span> <span class="token number">1314</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myFloat <span class="token operator">=</span> <span class="token number">1.142</span><span class="token punctuation">;</span>

<span class="token comment">// Multiple assignment</span>
<span class="token comment">// In my view this is often confusing and considered bad practice.</span>
<span class="token keyword">var</span> thing1<span class="token punctuation">,</span> thing2<span class="token punctuation">;</span>
thing1 <span class="token operator">=</span> thing2 <span class="token operator">=</span> <span class="token number">4211</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token variable">$myStr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">;</span>
<span class="token variable">$myStr2</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">;</span>
<span class="token variable">$myBool</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token variable">$myInt</span> <span class="token operator">=</span> <span class="token number">1314</span><span class="token punctuation">;</span>
<span class="token variable">$myFloat</span> <span class="token operator">=</span> <span class="token number">1.142</span><span class="token punctuation">;</span>

<span class="token comment">// Multiple assignment</span>
<span class="token comment">// In my view this is often confusing and considered bad practice.</span>
<span class="token variable">$thing1</span> <span class="token operator">=</span> <span class="token variable">$thing2</span> <span class="token operator">=</span> <span class="token number">4211</span><span class="token punctuation">;</span>
</code></pre>
<h3>Notable differences</h3>
<ul>
  <li>
    <p>Local variables in PHP are always preceded by a <code>$</code>.</p>
  </li>
  <li>
    <p>
      PHP has no local variable equivalent to <code>const</code> or <code>let</code> in javascript.
      Every local PHP variable is scoped similar to a <code>var</code> in javascript.
    </p>
    <p>For example they are available across blocks.</p>
  </li>
</ul>
<pre class="language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$someBool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$newVar</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"foo"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token variable">$newVar</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"foo"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token variable">$err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$errVar</span> <span class="token operator">=</span> <span class="token variable">$err</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Can use $newVar here sometimes.</span>
<span class="token comment">// Although this if the if statement didn't occur this will be an error or warning (depending on PHP version).</span>
<span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token variable">$newVar</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token variable">$errVar</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2>Semicolons</h2>
<p>Semicolons are required in PHP and optional in Javascript. If you are familiar with the places that semicolons <strong>can</strong> be placed in Javascript, you are <strong>required</strong> to place semicolons in those places in PHP.</p>
<h2>Strings</h2>
<p>Strings in javascript and PHP are relatively similar, at least as far as syntax goes.</p>
<p>They differ slighly when it comes to interpolation and concatenation though.</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// Single quotes and double quotes are interchangable.</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">"val"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getBazObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">"baz"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Concat with the + operator.</span>
<span class="token keyword">var</span> str3 <span class="token operator">=</span> foo <span class="token operator">+</span> bar <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token property-access">key</span><span class="token punctuation">;</span> <span class="token comment">//foobarval</span>

<span class="token comment">// Interpolation with backtick strings.</span>
<span class="token keyword">var</span> str4 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>foo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bar<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span><span class="token property-access">key</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// foo-bar-val</span>
<span class="token comment">// Any expression is allowed</span>
<span class="token keyword">var</span> str5 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>foo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getBazObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">key</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// foo-baz</span>
<span class="token comment">// Multiple lines allowed.</span>
<span class="token keyword">var</span> str6 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
Line 1
Line 2
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token comment">// Single quotes and double quotes are have different escaping behaviour.</span>
<span class="token comment">// Escape sequences (like \n or \t are not interpretted).</span>
<span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'foo\n'</span><span class="token punctuation">;</span>
<span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"bar\n"</span><span class="token punctuation">;</span>
<span class="token comment">// $foo !== $bar</span>

<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>stdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"val"</span><span class="token punctuation">;</span>
<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"key"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"val"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">getBazObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
        <span class="token string double-quoted-string">"key"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"baz"</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Concat with the . operator.</span>
<span class="token variable">$str3</span> <span class="token operator">=</span> <span class="token variable">$foo</span> <span class="token operator">.</span> <span class="token variable">$bar</span> <span class="token operator">.</span> <span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">key</span><span class="token punctuation">;</span> <span class="token comment">//foobarval</span>

<span class="token comment">// Interpolation with double quotes.</span>
<span class="token comment">// Note the required brackets for array and object access.</span>
<span class="token variable">$str4</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$foo</span></span>-<span class="token interpolation"><span class="token variable">$bar</span></span>-<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">key</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">;</span>
<span class="token variable">$str4</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$foo</span></span>-<span class="token interpolation"><span class="token variable">$bar</span></span>-<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">;</span>

<span class="token comment">// ERROR, expressions are not allowed.</span>
<span class="token variable">$str5</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$foo</span></span>-{getBazObj()['key']}"</span><span class="token punctuation">;</span>

<span class="token comment">// Multiple lines allowed in HEREDoc</span>
<span class="token comment">// https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc</span>
<span class="token variable">$str6</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&#x3C;&#x3C;&#x3C;</span>SOME_PREFIX</span>
Line 1
Line 2
<span class="token delimiter symbol">SOME_PREFIX<span class="token punctuation">;</span></span></span>
</code></pre>
<h2>Arrays</h2>
<p>Numberically indexed array syntax is equivalent between PHP and Javascript.</p>
<p>Arrays can be made up of multiple types, and use the <code>[</code> and <code>]</code> symbols to indicate start and end.</p>
<pre class="language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token string">"item1"</span><span class="token punctuation">,</span> <span class="token string">"item2"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"nested"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>Older versions of PHP (PHP {"&#x3C;="} 5.3) didn't support this array syntax and used <code>array(</code> and <code>)</code> to indicate the start and end of an array.</p>
<pre class="language-php"><code class="language-php"><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"item1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"item2"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nested"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Nowadays the short syntax is preferred.</p>
<h2>Array Access</h2>
<p>Numerically indexed array access is equivalent between PHP and javascript as well.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"item1"</span><span class="token punctuation">,</span> <span class="token string">"item2"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "item1"</span>
items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "item2"</span>
items<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "item2"</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"item1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"item2"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$index</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token variable">$items</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "item1"</span>
<span class="token variable">$items</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "item2"</span>
<span class="token variable">$items</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "item2"</span>
</code></pre>
<h2>Objects (PHP Assosciative Arrays)</h2>
<p>
  Here's our first major difference between the two languages.
  In PHP "array" has additional meanings than in javascript.
</p>
<p>In Javascript you can quickly construct an object with the following syntax.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">field1</span><span class="token operator">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">field2</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>Here's the equivalent in PHP.</p>
<pre class="language-php"><code class="language-php"><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string double-quoted-string">"field1"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"value"</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"field2"</span> <span class="token operator">=></span> <span class="token constant boolean">true</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// PHP &#x3C;= 5.3</span>
<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">"field1"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"value"</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"field2"</span> <span class="token operator">=></span> <span class="token constant boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The main differences are:</p>
<ul>
  <li>Use brackets (<code>[]</code>) instead of curly braces (<code>{}</code>).</li>
  <li>Use <code>=></code> instead of <code>:</code>.</li>
  <li>String keys <strong>must</strong> be quoted in PHP.</li>
</ul>
<h3>Differentiating assosciative and indexed arrays in PHP</h3>
<p>
  While javascript has a syntax differences between quicly declaring arrays and objects,
  they are actually objects internally. For example
</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> arr <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// To actually check if something is an array.</span>
<span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true.</span>
</code></pre>
<p>
  In PHP the differentiator between the two types of arrays is purely in the keys of the array.
  JS equivalents will be in the comments.
</p>
<pre class="language-php"><code class="language-php"><span class="token comment">// These are equivalent.</span>
<span class="token punctuation">[</span><span class="token string double-quoted-string">"item1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"item2"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// ["item1", "item2"]</span>
<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"item1"</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"item2"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// ["item1", "item2"]</span>

<span class="token comment">// Numerical strings are treated as numbers.</span>
<span class="token punctuation">[</span><span class="token string double-quoted-string">"0"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"item1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"1"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"item2"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// ["item1", "item2"]</span>

<span class="token comment">// Keys are out of order.</span>
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"item1"</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"item2"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// {"1": "item1", "0": "item2"}</span>

<span class="token comment">// There is a hole.</span>
<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"item1"</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"item2"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// {"0" :"item1", "2": "item2"}</span>

<span class="token comment">// Has a non-numeric key.</span>
<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"item1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"foo"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"item2"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// {"0": "item1", foo: "item2"}</span>
</code></pre>
<h2>PHP Objects</h2>
<p>
  These rules can be a bit tricky. PHP does have first class objects (instances of a class),
  but there is no short syntax for instantiating them currently. There is <a href="https://wiki.php.net/rfc/object-initializer#anonymous_classes">an RFC though</a>.
</p>
<pre class="language-php"><code class="language-php"><span class="token comment">// { field1: "value", field2: true }</span>
<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">stdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">field1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"value"</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">field2</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
</code></pre>
<h2>Object property access</h2>
<p>Javascript object access and PHP assosciated can be quite similar.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">field1</span><span class="token operator">:</span> <span class="token string">"value"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token string">"field1"</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token string">"field1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "value"</span>
obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "value"</span>

<span class="token comment">// Only in javascript.</span>
obj<span class="token punctuation">.</span><span class="token property-access">field1</span><span class="token punctuation">;</span> <span class="token comment">// "value"</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string double-quoted-string">"field1"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"value"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"field1"</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"field1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "value"</span>
<span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "value"</span>
</code></pre>
<p>
  Notably though these <strong>are not objects</strong> in PHP. In PHP an object is only ever instantiated from a class
  with the <code>new</code> keyword. Property access works a bit differently.
</p>
<pre class="language-php"><code class="language-php"><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">stdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">field1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"value"</span><span class="token punctuation">;</span>

<span class="token comment">// Property access looks the same as assignment.</span>
<span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">field1</span><span class="token punctuation">;</span> <span class="token comment">// "value"</span>
</code></pre>
<h3>Undefined and null</h3>
<p>Javascript has both <code>undefined</code> and <code>null</code> as first class built in concerete types.</p>
<p>PHP has a built-in <code>null</code>, but anything that would result in <code>undefined</code> would normally be considered an notice, error or warning depending on the situation.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">val2</span><span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

obj<span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
obj<span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
obj<span class="token punctuation">[</span><span class="token string">"val"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
obj<span class="token punctuation">.</span><span class="token property-access">hello</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
obj<span class="token punctuation">.</span><span class="token property-access">val2</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
obj<span class="token punctuation">.</span><span class="token property-access">val</span><span class="token punctuation">;</span> <span class="token comment">// null.</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// undefined.</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// undefined.</span>

<span class="token comment">// Check if property exists and is defined.</span>
<span class="token keyword">var</span> exists<span class="token punctuation">;</span>
exists <span class="token operator">=</span> <span class="token string">"thing"</span> <span class="token keyword">in</span> obj<span class="token punctuation">;</span>
exists <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token property-access">thing</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

obj<span class="token punctuation">.</span><span class="token property-access">hello</span><span class="token punctuation">.</span><span class="token property-access">other</span><span class="token punctuation">;</span> <span class="token comment">// Error: cannot access property "other" on undefined.</span>
</code></pre>
<p>Undefined property and array access in PHP is an Exception in PHP 8+.</p>
<p>
  In prior versions of PHP, such things would created a "notice" (basically a logged warning)
  and evaluate to <code>null</code>.
</p>
<pre class="language-php"><code class="language-php"><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">stdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// No way to set "undefined".</span>
<span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">val</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$obj</span><span class="token operator">-></span><span class="token punctuation">{</span><span class="token number">142</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Exception</span>
<span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">hello</span><span class="token punctuation">;</span> <span class="token comment">// Exception</span>
<span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">val</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Exception.</span>
<span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Exception.</span>

<span class="token comment">// Check if property exists and is defined.</span>
<span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token function">property_exists</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"thing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false.</span>
<span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">thing</span><span class="token operator">-></span><span class="token property">nested</span><span class="token operator">-></span><span class="token property">thing</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nested'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">val</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre>
<h3>Null Coalescing and nullsafe operator</h3>
<p>Javascript and PHP both have a null coalescing operator and null-safe operator in recent versions.</p>
<pre class="language-js"><code class="language-js">myObj<span class="token operator">?.</span>thing<span class="token operator">?.</span>other<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">"fallback"</span><span class="token punctuation">;</span>
myObj<span class="token operator">?.</span><span class="token method function property-access">doThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// No equivalent in PHP.</span>
myObj<span class="token operator">?.</span>doThing<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token comment">// PHP 7+</span>
<span class="token variable">$myObj</span><span class="token operator">-></span><span class="token property">thing</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'other'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string double-quoted-string">"fallback"</span><span class="token punctuation">;</span>
<span class="token comment">// PHP 8+</span>
<span class="token variable">$myObj</span><span class="token operator">?-></span><span class="token function">doThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2>Functions</h2>
<p>Functions declaration works looks pretty similar in PHP and Javascript.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">property1<span class="token punctuation">,</span> property2<span class="token punctuation">,</span> <span class="token spread operator">...</span>extraProperties</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do something.</span>

    <span class="token keyword control-flow">return</span> thing<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// call the function</span>
<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token string">"thing"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"extra"</span><span class="token punctuation">,</span> <span class="token string">"extra2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">myFunction</span><span class="token punctuation">(</span><span class="token variable">$property1</span><span class="token punctuation">,</span> <span class="token variable">$property2</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$extraProperties</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do something.</span>

    <span class="token keyword">return</span> <span class="token variable">$thing</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"thing"</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"extra"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"extra2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3>Hoisting</h3>
<p>
  One notable difference is that javascript has a feature called "hoisting" for functions
  and variables declared with <code>var</code> (but not ones declared with <code>let</code> or <code>const</code>).
</p>
<p>
  Essentially this means you can some things before you declare them, and the javascript runtime
  will "hoist" or move the declaration up before the usage. There is no equivalent in PHP.
  you must declare things before using them.
</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// Totally valid</span>
<span class="token function">myFunction</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">arg1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> thing <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token comment">// Fatal Error</span>
<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token variable">$thing</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">myFunction</span><span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token variable">$thing</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre>
<h3>Lambas / Anonymous Functions</h3>
<p>PHP and javascript both have anonymous functions but the syntax is slightly different.</p>
<p>The following are equivalent.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Anonymous Callbacks</span>
<span class="token function">functionWithCallback</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Arrow functions</span>
<span class="token keyword">var</span> <span class="token function-variable function">myFunc2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arg1</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">myFunc3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arg2</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token comment">// Anonymous Callbacks</span>
<span class="token variable">$myFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token variable">$myFunc</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">functionWithCallback</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Arrow functions</span>
<span class="token comment">// PHP 7.4+</span>
<span class="token keyword">var</span> myFunc2 <span class="token operator">=</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant boolean">true</span>

<span class="token comment">// INVALID SYNTAX</span>
<span class="token comment">// Inline return expressions only are allowed.</span>
<span class="token comment">// No return keyword.</span>
<span class="token keyword">var</span> myFunc3 <span class="token operator">=</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$arg2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant boolean">true</span> <span class="token punctuation">}</span>
</code></pre>
<h3>Closures</h3>
<p>
  One major difference in javascript and PHP is in how closures. Javascript <em>automatically</em> closes
  over any values you use in a lambda. In PHP you have to <em>manual</em> specify them (except for arrow functions).
</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> outerVariable <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> outer2 <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Can automatically access outside variable. ("Close over" the variable automatically).</span>
    <span class="token keyword">const</span> newVar <span class="token operator">=</span> outerVariable <span class="token operator">+</span> outer2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token variable">$outerVariable</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"foo"</span><span class="token punctuation">;</span>
<span class="token variable">$outer2</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"bar"</span><span class="token punctuation">;</span>
<span class="token comment">// Can automatically access outside variable. ("Close over" the variable automatically).</span>
<span class="token variable">$myFunc</span> <span class="token operator">=</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token variable">$outerVariable</span> <span class="token operator">.</span> <span class="token variable">$outer2</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ERROR. Can not access outside variable.</span>
    <span class="token variable">$newVar</span> <span class="token operator">=</span> <span class="token variable">$outerVariable</span> <span class="token operator">.</span> <span class="token variable">$outer2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-definition function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$outerVariable</span><span class="token punctuation">,</span> <span class="token variable">$outer2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Valid.</span>
    <span class="token variable">$newVar</span> <span class="token operator">=</span> <span class="token variable">$outerVariable</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"bar"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// To modify the outside variable you need to dereference it.</span>

<span class="token keyword">function</span> <span class="token function-definition function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token operator">&#x26;</span><span class="token variable">$outerVariable</span><span class="token punctuation">,</span> <span class="token variable">$outer2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Valid.</span>
    <span class="token variable">$outerVariable</span> <span class="token operator">=</span> <span class="token variable">$outer2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3>Passing Variable References and by value</h3>
<p>Another notable difference between javascript and PHP is how variable references.</p>
<p>
  I'll just be doing a brief overview, but you may come across a sticky situation in the future.
  If you do, please consult <a href="https://www.php.net/manual/en/language.references.php">the PHP documentation on references</a>.
</p>
<p>
  In short this really about the ability to modify a variable after passing it to a function.
  In my view code is clearer when passed variables are not modified in place, but instead copied, modified, and returned.
</p>
<p>Sometimes there can be performance (or memory) concerns with copying things, so it can be desirable to modify them in place.</p>
<p>Here are the javascript semantics.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">passVar</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> num<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj1<span class="token punctuation">.</span><span class="token property-access">prop</span> <span class="token operator">=</span> <span class="token string">"laptop"</span><span class="token punctuation">;</span> <span class="token comment">// will CHANGE original.</span>
    obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">"computer"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// will NOT affect original.</span>
    num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// will NOT affect original.</span>
    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">// will CHANGE original.</span>
    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"newArr"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// will NOT affect original.</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">passVar</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">prop</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"computer"</span><span class="token punctuation">;</span> <span class="token comment">// will CHANGE original.</span>
    <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">stdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will NOT affect original.</span>
    <span class="token variable">$num</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// will NOT affect original.</span>
    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">// will NOT affect original.</span>
    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'prop'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"laptop"</span><span class="token punctuation">;</span> <span class="token comment">// will NOT affect original.</span>
    <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"newArr"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// will NOT affect original.</span>
<span class="token punctuation">}</span>
</code></pre>
<p>
  Things may look different, but they actually are quite similar. The simple rule here,
  is <strong>objects</strong> can be modified after being passed. A javascript array can be modified,
  but as seen previously, a javscript array <em>is an object</em>.
</p>
<p>The parameters can be re-assigned, but do not affect anything outside of the scope of the function.</p>
<p>PHP has a special operator that changes these sementics though. The derefence operator (<code>&#x26;</code>).</p>
<pre class="language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">passVar</span><span class="token punctuation">(</span><span class="token operator">&#x26;</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token operator">&#x26;</span><span class="token variable">$num</span><span class="token punctuation">,</span> <span class="token operator">&#x26;</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">prop</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"computer"</span><span class="token punctuation">;</span> <span class="token comment">// will CHANGE original.</span>
    <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">stdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will CHANGE original.</span>
    <span class="token variable">$num</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// will CHANGE original.</span>
    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">// will CHANGE original.</span>
    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'prop'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"laptop"</span><span class="token punctuation">;</span> <span class="token comment">// will CHANGE original.</span>
    <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"newArr"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// will CHANGE original.</span>
<span class="token punctuation">}</span>
</code></pre>
<p>When using this operator, all of these examples will change the original value outside of the function.</p>
<h2>Conditionals</h2>
<p>Conditionals in PHP work very similarly to in javascript, even down to the automatic co-coercion of values.</p>
<p>The main difference is the addition of the <code>elseif</code> keyword in addition to <code>else if</code>.</p>
<p>The differences are subtle, but both are generally equivalent if you use curly braces. You can check <a href="https://www.php.net/manual/en/control-structures.elseif.php">the PHP documentation for details</a>.</p>
<h3>Equality</h3>
<p>
  Similar to javascript, PHP has both a <code>==</code> and a <code>===</code> operator, with similar semantics.
  It's recommended to use <code>===</code> to avoid WTF moments.
</p>
<h3>Ternaries</h3>
<p>PHP and javascript both have ternary exrpressions (if/else shorthand).</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> someConditional <span class="token operator">?</span> <span class="token string">"if true"</span> <span class="token operator">:</span> <span class="token string">"if false"</span><span class="token punctuation">;</span>

<span class="token comment">// Shorthand</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> someConditional <span class="token operator">||</span> <span class="token string">"fallback"</span><span class="token punctuation">;</span>
<span class="token comment">// Equivalent to</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> someConditional <span class="token operator">?</span> someConditional <span class="token operator">:</span> <span class="token string">"fallback"</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$someConditional</span> <span class="token operator">?</span> <span class="token string double-quoted-string">"if true"</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">"if false"</span><span class="token punctuation">;</span>

<span class="token comment">// PHP specific shorthand.</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$someConditional</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">"fallback"</span><span class="token punctuation">;</span>
<span class="token comment">// Equivalent to</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$someConditional</span> <span class="token operator">?</span> <span class="token variable">$someConditional</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">"fallback"</span><span class="token punctuation">;</span>
</code></pre>
<h2>Switch Statements</h2>
<p>Switch statements in javascript and PHP functional equivalently for the most part.</p>
<h2>Loops</h2>
<p>Basic loops are functionally identical between PHP and javascript.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do thing.</span>

    <span class="token comment">// Skip the rest of the loop.</span>
    <span class="token keyword control-flow">continue</span><span class="token punctuation">;</span>

    <span class="token comment">// Break out of the loop.</span>
    <span class="token keyword control-flow">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do thing.</span>

    <span class="token comment">// Skip the rest of the loop.</span>
    <span class="token keyword control-flow">continue</span><span class="token punctuation">;</span>

    <span class="token comment">// Break out of the loop.</span>
    <span class="token keyword control-flow">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&#x3C;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do thing.</span>

    <span class="token comment">// Skip the rest of the loop.</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>

    <span class="token comment">// Break out of the loop.</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do thing.</span>

    <span class="token comment">// Skip the rest of the loop.</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>

    <span class="token comment">// Break out of the loop.</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3>Iteration</h3>
<p>The most notable difference is in looping over iterators.</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// Iterate array.</span>
<span class="token comment">// Arrays are implicitly iterators.</span>
<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do thing.</span>
<span class="token punctuation">}</span>

<span class="token comment">// Iterate object.</span>
<span class="token comment">// An iterator must be created from an object.</span>
<span class="token comment">// Build utilties for this are `Object.entries()` `Object.keys()` and `Object.values()`.</span>
<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do thing.</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token comment">// Iterate an indexed or assosciative array</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do thing</span>
<span class="token punctuation">}</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$index</span> <span class="token operator">=></span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do thing</span>
<span class="token punctuation">}</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'value'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$index</span> <span class="token operator">=></span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do thing</span>
<span class="token punctuation">}</span>

<span class="token comment">// Objects can be iterated only if they implement `\Iterable`.</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$someIterable</span> <span class="token keyword">as</span> <span class="token variable">$index</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do thing.</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Generators &#x26; Iterables</h2>
<p>A generator is essentially a function that returns an iterable.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">myGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">yield</span> <span class="token string">"val1"</span><span class="token punctuation">;</span>
    <span class="token keyword control-flow">yield</span> <span class="token string">"val2"</span><span class="token punctuation">;</span>
    <span class="token keyword control-flow">yield</span> <span class="token string">"val3"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> <span class="token function">myGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token comment">// No special syntax.</span>
<span class="token keyword">function</span> <span class="token function-definition function">myGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token string double-quoted-string">"val1"</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string double-quoted-string">"val2"</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string double-quoted-string">"val3"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">myGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Classes and Properties</h2>
<p>PHP classes work similar to classes in the latest versions of javascript.</p>
<p><strong>Older Javascript</strong></p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyClass</span></span><span class="token punctuation">(</span><span class="token parameter">property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">property</span> <span class="token operator">=</span> property<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">method</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">property</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">otherMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token maybe-class-name">MyClass</span><span class="token punctuation">.</span><span class="token property-access">staticProperty</span> <span class="token operator">=</span> <span class="token string">"static property"</span><span class="token punctuation">;</span>
<span class="token maybe-class-name">MyClass</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">staticMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token string">"static thing"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token maybe-class-name">MyClass</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">staticOtherMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token maybe-class-name">MyClass</span><span class="token punctuation">.</span><span class="token method function property-access">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p><strong>Modern Javascript</strong></p>
<pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">OtherClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> staticProperty <span class="token operator">=</span> <span class="token string">"static property"</span><span class="token punctuation">;</span>
    property<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">property</span> <span class="token operator">=</span> property<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">property</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">otherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Call other method.</span>
        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token string">"static thing"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">staticOtherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Refence specific static method.</span>
        <span class="token keyword control-flow">return</span> <span class="token maybe-class-name">MyClass</span><span class="token punctuation">.</span><span class="token method function property-access">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Reference current static method, even in subclass.</span>
        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token maybe-class-name">MyClass</span><span class="token punctuation">.</span><span class="token property-access">staticProperty</span><span class="token punctuation">;</span> <span class="token comment">// "static property";</span>
<span class="token maybe-class-name">MyClass</span><span class="token punctuation">.</span><span class="token method function property-access">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "static thing";</span>
<span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
instance<span class="token punctuation">.</span><span class="token property-access">property</span><span class="token punctuation">;</span> <span class="token comment">// "foo"</span>
instance<span class="token punctuation">.</span><span class="token method function property-access">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "foo"</span>
</code></pre>
<p><strong>PHP</strong></p>
<pre class="language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">OtherClass</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token constant">CLASS_CONSTANT</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"thing"</span><span class="token punctuation">;</span> <span class="token comment">// Doesn't exist in JS.</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$staticProperty</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"static property"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$property</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token scope"><span class="token keyword">parent</span><span class="token punctuation">::</span></span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token this keyword">$this</span><span class="token operator">-></span><span class="token property">property</span> <span class="token operator">=</span> <span class="token variable">$property</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token this keyword">$this</span><span class="token operator">-></span><span class="token property">property</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">otherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Call other method.</span>
        <span class="token keyword">return</span> <span class="token this keyword">$this</span><span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">"static thing"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">staticOtherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Equivalent.</span>
        <span class="token comment">// Reference our own or parent static method.</span>
        <span class="token keyword">return</span> <span class="token scope">MyClass<span class="token punctuation">::</span></span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token scope"><span class="token keyword">self</span><span class="token punctuation">::</span></span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Allows subclass to override `staticMethod()`</span>
        <span class="token keyword">return</span> <span class="token scope"><span class="token keyword">static</span><span class="token punctuation">::</span></span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token scope">MyClass<span class="token punctuation">::</span></span><span class="token constant">CLASS_CONSTANT</span><span class="token punctuation">;</span> <span class="token comment">// "thing"</span>
<span class="token scope">MyClass<span class="token punctuation">::</span></span><span class="token variable">$staticProperty</span><span class="token punctuation">;</span> <span class="token comment">// "static property";</span>
<span class="token scope">MyClass<span class="token punctuation">::</span></span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "static thing";</span>
<span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$instance</span><span class="token operator">-></span><span class="token property">property</span><span class="token punctuation">;</span> <span class="token comment">// ERROR (visibility is private).</span>
<span class="token variable">$instance</span><span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "foo"</span>
</code></pre>
<h3>Notable Differences</h3>
<ul>
  <li>PHP classes support constants.</li>
  <li>PHP classes support visibility modifiers
    <ul>
      <li>none specified - <code>public</code> is assumed. It's good practice to specify a modifier though, and be carefully consider raising internal details above <code>private</code>.</li>
      <li><code>public</code> - Anything can access.</li>
      <li><code>protected</code> - The current class and subclasses can access.</li>
      <li><code>private</code> - The current class only can access. Subclasses cannot access.</li>
    </ul>
  </li>
  <li>The <code>function</code> keyword is required.</li>
  <li>Properties and methods are access with <code>-></code> instead of <code>.</code>.</li>
  <li>Static properties, constants, and methods are accessed with <code>::</code>.
    <ul>
      <li>Fun fact, you can access instance methods with <code>::</code> as well, but it can look a little weird.</li>
    </ul>
  </li>
  <li><code>$this</code> references the current instance instead of <code>this</code>.</li>
  <li><code>self</code> and <code>static</code> are used to reference static properties.
    <ul>
      <li><code>self</code> accesses the classes own items and those of parent classes.</li>
      <li><code>static</code> accesses the classes own items and those of parent classes, and those of subclasses.</li>
    </ul>
  </li>
  <li><code>__construct</code> is used instead of <code>__constructor</code>.</li>
  <li>Use <code>parent::</code> instead of <code>super</code></li>
</ul>
<h3>Traits</h3>
<p>PHP traits are a feature with no language equivalent in javascript. They are essentially a "piece" of a class that gets duplicated everywhere they are used.</p>
<p><a href="https://www.php.net/manual/en/language.oop5.traits.php">PHP Trait Documentation</a></p>
<pre class="language-php"><code class="language-php"><span class="token keyword">trait</span> <span class="token class-name-definition class-name">MyTrait</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">doThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">MyTrait</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$instance</span><span class="token operator">-></span><span class="token function">doThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ERROR - You can't instantiate a trait.</span>
<span class="token keyword">new</span> <span class="token class-name">MyTrait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2>Passing references to classes, methods, and functions</h2>
<p>Javascript has first class functions. That is in javascript a function is a type that can be passed as a variable.</p>
<p>PHP instead has a concept of a <code>callable</code> which is a reference to some function somewhere.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token function-variable function">lambda</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">arrow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">arrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> altClass <span class="token operator">=</span> <span class="token maybe-class-name">MyClass</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">altClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> altFunc <span class="token operator">=</span> myFunction<span class="token punctuation">;</span>
<span class="token function">altFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> altStaticMethod <span class="token operator">=</span> <span class="token maybe-class-name">MyClass</span><span class="token punctuation">.</span><span class="token property-access">staticMethod</span><span class="token punctuation">;</span>
<span class="token function">altStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> altMethod <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token property-access">method</span><span class="token punctuation">;</span>
<span class="token function">altMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class="language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">myFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$lambda</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token variable">$lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$lambda</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$arrow</span> <span class="token operator">=</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token variable">$arrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$arrow</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$altClass</span> <span class="token operator">=</span> <span class="token scope">MyClass<span class="token punctuation">::</span></span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token variable">$altClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$altClass</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'MyClass'</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token variable">$altClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$altFunc</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'myFunction'</span><span class="token punctuation">;</span>
<span class="token variable">$altFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$altStaticMethod</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token scope">MyClass<span class="token punctuation">::</span></span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'staticMethod'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$altStaticMethod</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'param1'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$altMethod</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$instance</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'method'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$altStaticMethod</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'param1'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<h3>Notable Differences</h3>
<p>Passing functions and classes around in PHP genreally involves referencing something by it's string name rather than a concrete object.</p>
<p>Notably classes are passed by string names. Any PHP class automatically has a constant on it <code>::class</code>, that will give you the fully qualified class name. This is mainly useful when dealing with namespaced classes.</p>
<p>Methods are passed as an array of 2 items.</p>
<p>Notably there are 2 built in functions to deal with <code>callables</code>.</p>
<ul>
  <li><code>is_callable($maybeCallable)</code> - Determine is something is callable.</li>
  <li><code>call_user_func($callable, $arguments)</code> - Call a callable with some arguments.</li>
</ul>
<h2>Namespaces</h2>
<p>In PHP it is a fatal error to declare mutliple symbols with the same name, and since all symbols get loaded into the same scope (which lives for the duration of the program) you need some way to prevent conflicts.</p>
<p>For javascript, the solution is modules, which each have their own scope. It's not an error to have a function call <code>doTheThing()</code> in multiple javascript files in one project as long as they aren't both used in the same file.</p>
<p>Instead of modules, PHP uses namespaces. The idea is to have some prefix on your class names to distinguish them.</p>
<p>In the early days of PHP this would be done with very long class names, often starting with the vendor name, and then additional pieces for what part of the program it was. For example, <code>PHPUnit</code> (a major testing framework of PHP), has base test class that used to be called <code>PHPUnit_Framework_TestCase</code>. Unfortunately names like this can get quite wordy, so PHP added a feature called namespaces.</p>
<p>So instead of this:</p>
<pre class="language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PHPUnit_Framework_TestCase</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token scope">PHPUnit_Framework_TestCase<span class="token punctuation">::</span></span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>you can do this:</p>
<pre class="language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">PHPUnit<span class="token punctuation">\</span>Framework</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">TestCase</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Other file</span>

<span class="token keyword">use</span> <span class="token package">PHPUnit<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>TestCase</span><span class="token punctuation">;</span>

<span class="token scope">TestCase<span class="token punctuation">::</span></span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Or the full name</span>
<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>PHPUnit<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>TestCase</span><span class="token operator">::</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3>Using namespaces</h3>
<ul>
  <li>After declaring a <code>namespace</code> in your file, all following symbols will be considered part of that namespace.</li>
  <li>A <code>use</code> statement brings a class into scope and allows to refer to it by a shorted name.
    <ul>
      <li><code>use \PHPUnit\Framework</code> would allow you to call <code>Framework\TestCase::assert()</code>.</li>
      <li><code>use \PHPUnit\Framework\TestCase</code> allows you to call <code>TestCase::assert()</code>.</li>
      <li>If you call a class starting with a <code>\</code> character, it will ignore any <code>use</code> statements.</li>
      <li>If you call a class without a <code>\</code> character:
        <ul>
          <li>It will check if there is a use statement for that short name.</li>
          <li>Then check if that symbol is the current namespace.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Self-Hosting Analytics with Plausible]]></title>
            <description><![CDATA[I was recently looking for a cheap way to move a few sites off of Google Analytics and began looking into various options, both cloud-hosted and self-hosted.  …]]></description>
            <link>/posts/self-hosting-analytics-with-plausible</link>
            <guid isPermaLink="false">self-hosting-analytics-with-plausible</guid>
            <category><![CDATA[self-hosting]]></category>
            <category><![CDATA[plausible]]></category>
            <category><![CDATA[analytics]]></category>
            <category><![CDATA[docker]]></category>
            <category><![CDATA[systemd]]></category>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Sun, 08 Nov 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
<p>
  I was recently looking for a cheap way to move a few sites off of Google Analytics
  and began looking into various options, both cloud-hosted and self-hosted.
</p>
<h2>Available Options</h2>
<p>
  Unfortunately most cloud-hosted options (that aren't google analytics)
  are relatively pricy for what are essentially low traffic sites. After a bit of evalution
  the best options seemed to be:
</p>
<ul>
  <li><a href="https://usefathom.com/pricing">Fathom (cloud)</a> - $14/month</li>
  <li><a href="https://github.com/usefathom/fathom">Fathom (self-hosted)</a> - ~$5/month</li>
  <li><a href="https://matomo.org/pricing/">Matamo (cloud)</a> - $30/month</li>
  <li><a href="https://github.com/matomo-org/matomo">Matamo (self-hosted)</a> - $10/month (greater server requirements)</li>
  <li><a href="https://plausible.io/">Plausible (cloud)</a> - $6/month</li>
  <li><a href="https://github.com/plausible/analytics">Plausible (self-hosted)</a> - $5/month</li>
</ul>
<p>
  I ruled out the cloud hosted options for now, mostly because I wanted to be able to try a few of these out
  quickly, without giving out any payment information.
</p>
<p>
  Matamo's hosting requirements seemed larger than I wanted to go, and the additional features it has
  over the other's seem more like clutter for my use cases.
</p>
<p>That left me with Fathom &#x26; Plausible.</p>
<h3>Ruling out Fathom</h3>
<p>
  I got Fathom up and running quick enough (they have 1-click digital ocean droplet),
  but after setting it up, but it seemed to have a few major flaws:
</p>
<ul>
  <li>The analytics dashboard was completely public, with no UI I could find to:
    <ul>
      <li>Restrict it.</li>
      <li>Sign in.</li>
    </ul>
  </li>
  <li>I passed through the initial setup, but I couldn't find how to see my siteID or script location again.</li>
</ul>
<p>This was enough friction that I tore down the instance and figured I'd give Plausible a shot.</p>
<h2>Installing Plausible</h2>
<p>
  I followed the <a href="https://docs.plausible.io/self-hosting/">self-hosted tutorial provided by Plausible</a>, but I ran into a couple minor issues while
  following it so I figured I'd write this post outlining the whole process.
</p>
<h2>Creating the Server</h2>
<p>
  I opted to use Digital Ocean for my hosting as I've used them for a few different projects before.
  You should be able to use any other hosting provider as long as they support.
</p>
<p>I created a new project, and setup a droplet with the following configuration:</p>
<ul>
  <li>1 vCPU</li>
  <li>1GB RAM / 25 GB Disk</li>
  <li>Droplet - Docker 19.x on Ubuntu 20.04 from the Marketplace.</li>
  <li>IPv6 &#x26; monitoring enabled.</li>
  <li>Attached my SSH key to the droplet.</li>
</ul>
<p>Once the droplet was spun up, I ssh'd into it.</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">ssh</span> root@ip.of.my.droplet
</code></pre>
<h2>Installing Plausible</h2>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /srv
<span class="token function">git</span> clone https://github.com/plausible/hosting plausible
<span class="token builtin class-name">cd</span> plausible

<span class="token comment"># Generate a random key.</span>
openssl rand -base64 <span class="token number">64</span>

<span class="token comment"># Edit the plausible config</span>
<span class="token function">nano</span> plausible-conf.env
</code></pre>
<p><strong>plausible-conf.env</strong></p>
<pre class="language-ini"><code class="language-ini"><span class="token key attr-name">ADMIN_USER_EMAIL</span><span class="token punctuation">=</span><span class="token value attr-value">EMAIL</span>
<span class="token key attr-name">ADMIN_USER_NAME</span><span class="token punctuation">=</span><span class="token value attr-value">USERNAME</span>
<span class="token key attr-name">ADMIN_USER_PWD</span><span class="token punctuation">=</span><span class="token value attr-value">MY_PASSWORD</span>
<span class="token key attr-name">BASE_URL</span><span class="token punctuation">=</span><span class="token value attr-value">https://stats.charron.dev</span>
<span class="token key attr-name">SECRET_KEY_BASE</span><span class="token punctuation">=</span><span class="token value attr-value">RANDOM_KEY</span>
</code></pre>
<h2>Starting and accessing Plausible</h2>
<p>
  By default Plausible starts up on port 8000. It's expected that you will use some kind of reverse proxy.
  I opted to use cloudflare as my reverse proxy and handle https.
</p>
<p>Here I:</p>
<ul>
  <li>Update Plausible to run on port 80.</li>
  <li>Configure my DNS (run through cloudflare) to point to the droplet.</li>
  <li>Block access on port 80 to go only go through cloudflare.</li>
</ul>
<h3>Update Plausible to run on port 80</h3>
<p><strong>docker-compose.yml</strong></p>
<pre class="language-yml"><code class="language-yml"><span class="token comment"># Before</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8000<span class="token punctuation">:</span><span class="token number">8000</span>

<span class="token comment"># After</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 80<span class="token punctuation">:</span><span class="token number">8000</span>
</code></pre>
<h3>Configuring DNS</h3>
<ul>
  <li>Go to cloudflare DNS.</li>
  <li>Add 2 records.</li>
</ul>
<pre class="language-shell"><code class="language-shell">A stats DROPLET_IPV4
AAAA stats DROPLET_IPV6
</code></pre>
<h3>Only allowing access through Cloudflare</h3>
<p>
  I configured <a href="https://wiki.ubuntu.com/UncomplicatedFirewall">UFW (Uncomplicated Firewall)</a> with some additional rules
  following <a href="https://designinterventionsystems.com/plone-blog/configuring-the-ufw-firewall-to-allow-cloudflare-ip-addresses">this guide.</a>
</p>
<h2>Starting up the Server</h2>
<p>I made a small script to startup the server.</p>
<p><strong>/srv/start-plausible.sh</strong></p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /srv/plausible
<span class="token function">docker-compose</span> up --detached
</code></pre>
<p>Running this scripts starts up the server.</p>
<h2>Creating a SystemD service that runs on startup</h2>
<p>In the event of a restart I want the droplet to be able to start up the server automatically.</p>
<p>To do that I created a SystemD service.</p>
<p><strong>/etc/systemd/system/plausible.service</strong></p>
<pre class="language-ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">Plausible Analytics</span>
<span class="token key attr-name">After</span><span class="token punctuation">=</span><span class="token value attr-value">network.target</span>
<span class="token key attr-name">StartLimitIntervalSec</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">Type</span><span class="token punctuation">=</span><span class="token value attr-value">simple</span>
<span class="token key attr-name">Restart</span><span class="token punctuation">=</span><span class="token value attr-value">always</span>
<span class="token key attr-name">RestartSec</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">User</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/bin/env /srv/plausible.sh</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token value attr-value">multi-user.target</span>
</code></pre>
<p>Then I enabled the service.</p>
<pre class="language-shell"><code class="language-shell"><span class="token comment"># Will run on startup</span>
systemctl <span class="token builtin class-name">enable</span> plausible

<span class="token comment"># Manually run it</span>
systemctl start plausible
</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Speeding Up PHP in Docker w/ XDebug]]></title>
            <description><![CDATA[I've been using Docker for my local environments at Vanilla since 2017. It was a good way to ensure consistent & reproducible developer environments and was a …]]></description>
            <link>/posts/speeding-up-php-in-docker-xdebug</link>
            <guid isPermaLink="false">speeding-up-php-in-docker-xdebug</guid>
            <category><![CDATA[PHP]]></category>
            <category><![CDATA[Performance]]></category>
            <category><![CDATA[XDebug]]></category>
            <category><![CDATA[Docker]]></category>
            <category><![CDATA[Nginx]]></category>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Fri, 06 Nov 2020 05:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
<p>
  I've been using Docker for my local environments at Vanilla since 2017.
  It was a good way to ensure consistent &#x26; reproducible developer environments
  and was a marked improvement over what we were running before. We setup a single repository
  with our shared environment (<a href="https://github.com/vanilla/vanilla-docker">vanilla-docker</a>) and
  it spread across the company like wildfire.
</p>
<p>
  The consistency was great, especially as we onboarded various junior developers over the years.
  Unfortunately in 2018, Apple released MacOS High Sierra, sporting a new filesystem, <a href="https://en.wikipedia.org/wiki/Apple_File_System">APFS</a>.
</p>
<p>This brought one single major regression to our developer environments.</p>
<h2>Docker for Mac was Slow!</h2>
<p>
  In the beginning, it was completely unusable.
  <a href="https://github.com/docker/for-mac/issues/2582">Massive CPU spikes would freeze up our machines</a>, and response times were abysmal.
</p>
<p>Things got a little better with introduction of a few options when mounting volumes: <a href="https://tkacz.pro/docker-volumes-cached-vs-delegated/">Delegated &#x26; Cached</a></p>
<p>
  These along with various improvements in docker for mac made things better,
  but we still struggled with performance for a long time.
  It wasn't completely unusable, but we were seeing 3-4 second response times in docker,
  where we would see 200-300ms response times in local development.
</p>
<h2>Various Attempts at Fixing it</h2>
<p>I tried a few things to speed them up.</p>
<ul>
  <li><a href="https://www.jeffgeerling.com/blog/2020/revisiting-docker-macs-performance-nfs-volumes">NFS Volumes</a> - This offered a 30-40% speed improvement but proved to difficult to roll across all of our developers due to the additional configuration required.</li>
  <li><a href="https://docker-sync.readthedocs.io/en/latest/">docker-sync</a> - This tool gave essentially native performance but brought some major drawbacks. I tried 2 times, once in 2019, and again in the beginning of 2020 but these still seemed to hold true.
    <ul>
      <li>It was very slow to startup. We have a lot of files and directories, and the initial sync would take 10+ minutes with no status indicator. Sometimes it would hang entirely and you'd have to reboot your machine, wipe the containers, and start again.</li>
      <li>It would stop syncing at random times with no indication. You would notice when you changes suddenly stopped applying. Often the only fix was to wipe the volumes and redo the initial sync. This was particularly evident when checking out and older release and swithing back.</li>
      <li>The configuration was complicated. Additional commands were required for startup, and the configuration file used a poorly documented syntax for marking excluded directories (a few <code>node_modules</code> directories in particular needed to be excluded in order for things to sync for even short periods of time).</li>
      <li>Sometimes filesystem permissions wouldn't sync properly. This tended to happen with certain configuration files written by the app.</li>
    </ul>
  </li>
</ul>
<h2>The Real Problem - XDebug</h2>
<p>
  Many of our developers use XDebug extensively during development and testing.
  A 2-5x slowdown while running a debug session is not unexpected.
</p>
<p>
  Little did I know that just <strong><em>having the extension installed brings along some significant slowdown.</em></strong>
  This is amplified in docker, where every System IO call brings with it a lot of overhead due to the virtualization in Docker for Mac.
</p>
<p>
  Removing the XDebug extension had the local sites responding within expected times again.
  XDebug is really useful though. I didn't want to give it up. Enabling it also couldn't be an onerous activity; I could use XDebug 10-20 times throughout a workday, and having to restart the container would be a chore.
</p>
<h2>The Solution - 2 PHP-FPM Containers</h2>
<p>The final solution ended up being running 2 PHP-FPM containers.</p>
<ol>
  <li>With a "production-ish" configuration. This one <em>without</em> XDebug and <em>with</em> a development configuration for OPCache.</li>
  <li>With a debugging configuration. This one <em>with</em> XDebug.</li>
</ol>
<p>Nginx was already used to serve our PHP-FPM processes, so I just updated the configuration to route between them.</p>
<h2>The Configs</h2>
<p><a href="https://github.com/vanilla/vanilla-docker/pull/90">The Full PR is available here</a></p>
<p><strong>Nginx Server Config</strong></p>
<p>This is the bulk of the required configuration. It does the following:</p>
<ul>
  <li>Define the 2 upstreams (php-fpm socket and php-fpm-xdebug socket).</li>
  <li>Define a few mappings 2 allow switching between the 2 upstreams based on
    <ul>
      <li>An XDebug cookie.</li>
      <li>A query parameter of <code>?XDEBUG_SESSION_START</code></li>
      <li>Many possible cookie values used by various browser plugins and IDEs.</li>
    </ul>
  </li>
</ul>
<pre class="language-nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token comment"># ... Other top level config.</span>

    <span class="token comment"># Define available upstreams</span>
    <span class="token directive"><span class="token keyword">upstream</span> php-fpm</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">server</span> unix:/shared/var/run/php-fpm.sock</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">upstream</span> php-fpm-xdebug</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">server</span> unix:/shared/var/run/php-fpm-xdebug.sock</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment"># XDebug mappings.</span>
    <span class="token directive"><span class="token keyword">map</span> <span class="token variable">$arg_XDEBUG_SESSION_START</span> <span class="token variable">$session_arg_pass</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">default</span> php-fpm</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">1</span> php-fpm-xdebug</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">map</span> <span class="token variable">$cookie_XDEBUG_SESSION</span> <span class="token variable">$cookie_arg_pass</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">default</span> <span class="token variable">$session_arg_pass</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">xdebug</span> php-fpm-xdebug</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">1</span> php-fpm-xdebug</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">PHPSTORM</span> php-fpm-xdebug</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">XDEBUG_ECLIPSE</span> php-fpm-xdebug</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">map</span> <span class="token variable">$arg_XDEBUG_PROFILE</span> <span class="token variable">$xdebug_test_pass</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">default</span> <span class="token variable">$cookie_arg_pass</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">1</span> php-fpm-xdebug</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>

        <span class="token comment"># ... Rest of config</span>

        <span class="token directive"><span class="token keyword">location</span> ~* <span class="token string">"/([^./]+)/index\.php(/|$)"</span></span> <span class="token punctuation">{</span>
            <span class="token comment"># ... Other FastCGI configs.</span>
            <span class="token directive"><span class="token keyword">fastcgi_pass</span> <span class="token variable">$xdebug_test_pass</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment"># ... Rest of config</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>Debug PHP config</strong></p>
<pre class="language-ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">www</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">/shared/var/run/php-fpm-xdebug.sock</span>
<span class="token key attr-name">listen.owner</span> <span class="token punctuation">=</span> <span class="token value attr-value">www-data</span>
<span class="token key attr-name">listen.group</span> <span class="token punctuation">=</span> <span class="token value attr-value">www-data</span>
<span class="token key attr-name">listen.mode</span> <span class="token punctuation">=</span> <span class="token value attr-value">0660</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">xdebug</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">xdebug.idekey</span> <span class="token punctuation">=</span> <span class="token value attr-value">PHPSTORM</span>
<span class="token key attr-name">xdebug.profiler_output_dir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/var/log/php-fpm</span>

<span class="token key attr-name">xdebug.remote_enable</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span>
<span class="token key attr-name">xdebug.remote_host</span> <span class="token punctuation">=</span> <span class="token value attr-value">192.0.2.1</span>
<span class="token key attr-name">xdebug.profiler_enable_trigger</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span>

<span class="token comment"># Name the profiles with the url.</span>
<span class="token key attr-name">xdebug.profiler_output_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">%R.cachegrind.out</span>

<span class="token comment">; One second only. Fast expiry.</span>
<span class="token comment">; Keep requesting the cookie if you want it.</span>
<span class="token key attr-name">xdebug.remote_cookie_expire_time</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span>
</code></pre>
<p><strong>"Production-ish" PHP config</strong></p>
<pre class="language-ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">www</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">/shared/var/run/php-fpm.sock</span>

<span class="token key attr-name">listen.owner</span> <span class="token punctuation">=</span> <span class="token value attr-value">www-data</span>
<span class="token key attr-name">listen.group</span> <span class="token punctuation">=</span> <span class="token value attr-value">www-data</span>
<span class="token key attr-name">listen.mode</span> <span class="token punctuation">=</span> <span class="token value attr-value">0660</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">opcache</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">opcache.enable</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token comment">; 0 means it will check on every request</span>
<span class="token comment">; 0 is irrelevant if opcache.validate_timestamps=0 which is desirable in production</span>
<span class="token key attr-name">opcache.revalidate_freq</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token key attr-name">opcache.validate_timestamps</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">opcache.max_accelerated_files</span><span class="token punctuation">=</span><span class="token value attr-value">100000</span>
<span class="token key attr-name">opcache.memory_consumption</span><span class="token punctuation">=</span><span class="token value attr-value">500</span>
<span class="token key attr-name">opcache.max_wasted_percentage</span><span class="token punctuation">=</span><span class="token value attr-value">20</span>
<span class="token key attr-name">opcache.interned_strings_buffer</span><span class="token punctuation">=</span><span class="token value attr-value">16</span>
<span class="token key attr-name">opcache.fast_shutdown</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hello world]]></title>
            <description><![CDATA[I've been meening to start my own blog post for some time. I've written a few posts on dev.to before but I decided that if I was going to keep doing it, I woul…]]></description>
            <link>/posts/hello-world</link>
            <guid isPermaLink="false">hello-world</guid>
            <category><![CDATA[Hello world]]></category>
            <category><![CDATA[Meta]]></category>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Thu, 01 Oct 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
<p>
  I've been meening to start my own blog post for some time. I've written a few posts on <a href="https://dev.to">dev.to</a> before
  but I decided that if I was going to keep doing it, I would it would be best to have it on my own domain.
</p>
<p>I'm aiming to write frequently, at least once a week until this Covid-19 pandemic is over.</p>
<p>
  This is mostly intended as a bit of a future journal for myself, but hopefully anyone else reading it can get some
  utility out of my programming experiences.
</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Getting to know QuillJS (Parchment, Blots, and Lifecycle)]]></title>
            <description><![CDATA[Note: This series is targeted at people trying to gain an advanced understanding of Quill and Parchment. If you're just trying to get started with an easy, wel…]]></description>
            <link>/posts/getting-to-know-quilljs</link>
            <guid isPermaLink="false">getting-to-know-quilljs</guid>
            <category><![CDATA[Javascript]]></category>
            <category><![CDATA[contenteditable]]></category>
            <category><![CDATA[QuillJS]]></category>
            <category><![CDATA[Parchment]]></category>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Sun, 04 Oct 2020 04:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
<p><em>Note: This series is targeted at people trying to gain an advanced understanding of Quill and Parchment. If you're just trying to get started with an easy, well-featured editor, it might be good idea to check out Quill's <a href="https://quilljs.com/docs/quickstart/">Quickstart Guide</a> or <a href="https://quilljs.com/guides/cloning-medium-with-parchment/">Cloning Medium with Parchment guide</a>.</em></p>
<h2>What is Quill?</h2>
<p><a href="https://quilljs.com/">QuillJS</a> is a modern rich text editor built for compatibility and extensibility. It was created by <a href="https://twitter.com/jhchen">Jason Chen</a> and <a href="https://twitter.com/byronmilligan">Byron Milligan</a> and open sourced by Salesforce. Since then it has been used by hundreds of other companies and people to build fast, reliable, and rich editing experiences in a browser.</p>
<p>Quill is a mostly batteries-included library with support for most common formatting options such <strong>bold</strong>, <em>italics</em>, ~~strike~~, underline, custom fonts and colors, dividers, headings, <code>inline code</code>, code blocks, blockquotes, lists (bulleted, numbered, checkboxes), formulas, images, as well as embedded videos.</p>
<h2>What more could you want?</h2>
<p>A few months ago, the company I work for, <a href="https://github.com/vanilla">Vanilla Forums</a> began planning a new editor for our product. Our current editor supported numerous different text entry formats, including</p>
<ul>
  <li>Markdown</li>
  <li>BBCode</li>
  <li>HTML</li>
  <li>WYSIWYG HTML (using an iFrame to render the contents)</li>
</ul>
<p>We had different parsers, renderers, and frontend javascript for all of these formats, so we set out to create new editor to replace them all with a single new unified, rich editing experience.</p>
<p>We chose Quill as the base of our new editor due to its browser compatibility and extensibility, but quickly realized that it was not going to have all of the functionality we needed out of the box. Notably lacking was multiline block type structures like block-quotes (missing nesting and multiline support). We have some other formatting items such as Spoilers with similar requirements.</p>
<p>We also had some extended functionality to add in the form of rich link embeds, and special formatting options and functionality for images and videos.</p>
<p>So I set to out to learn <a href="https://github.com/quilljs/quill">Quill</a> and its underlying data library <a href="https://github.com/quilljs/parchment">Parchment</a> inside and out. This series of posts represents my understanding of Parchment and QuillJS. I am not a maintainer of the project, so if something is incorrect here, I encourage you to point it out.</p>
<h2>Data Formats</h2>
<p>Quill has 2 forms of data-formats. <a href="https://github.com/quilljs/parchment">Parchment</a> (Blots), and <a href="https://github.com/quilljs/delta">Delta</a>.</p>
<p>Parchment is used as an in-memory data structure made up primarily of LinkedLists in a tree structure. Its tree of Blots should map 1:1 with the browser's tree of DOM Nodes.</p>
<p>Deltas are used to store persistant data from the editor and takes the form of a relatively flat JSON array. Each item in the array represents an operation, that could affect or represent multiple DOM Nodes or Blots. This is the form of data that you will generally store in your Database or persistent storage. It is also used to represent diffence between one state and another.</p>
<h2>What is a Blot?</h2>
<p>Blots are the building blocks of a Parchment document. They are one of the most powerful abstractions of Quill, as they allow the editor and API users to consume and modify the document's contents without needing to touch the DOM directly. Blots have a simpler and more expressive interface than a DOM Node which can make consuming and creating them easier to reason about.</p>
<p>Each Blot must implement the interface <code>Blot</code> and every existing Blot in Quill and Parchment is a class that inherits from <code>ShadowBlot</code>.</p>
<p>In order to make it possible to look around the document from the perspective of a Blot, every Blot has the following references</p>
<ul>
  <li><code>.parent</code> - The Blot that contains this Blot. If this Blot is the top level Blot, <code>parent</code> will be <code>null</code>.</li>
  <li><code>.prev</code> - The previous sibling Blot in the tree from this Blot's parent. If this iBlotis the first child directly under its <code>parent</code>, <code>prev</code> will be <code>null</code>.</li>
  <li><code>.next</code> - The next sibling Blot in the tree form this Blot's parent. If this Blot is the last child directly under its <code>parent</code>, <code>next</code> will be <code>null</code>.</li>
  <li><code>.scroll</code> - The scroll is the top level Blot in Parchment's data structure. More info about the Scroll Blot will be provided later.</li>
  <li><code>.domNode</code> - Since Parchment's tree maps 1:1 with the DOM's tree, each Blot has access to the <code>Node</code> it represents. Additionally these DOM Nodes will have a reference to their Blot (with <code>.__blot</code>).</li>
</ul>
<h2>The Blot Lifecycle</h2>
<p>Each Blot has several "lifecycle methods" that you can override to run code at particular times in the process. You generally will still want to call <code>super.&#x3C;OVERRIDEN_METHOD></code> before or after inserting your own custom code though. This component lifecycle is broken up into multiple sections.</p>
<h3>Creation</h3>
<p>There are multiple steps in properly creating a Blot, but these can all be replaced with calling <code>Parchment.create()</code></p>
<h4><code>Blot.create()</code></h4>
<p>Each Blot has a <code>static create()</code> function that creates a DOM Node from an initial value. This is also good place to set initial values on a DOM Node that are unrelated to the actual Blot instance.</p>
<p>The returned DOM Node is not actually attached anywhere, and the Blot is still not yet created. This is because Blots are created <em>from</em> a DOM Node, so this function puts one together in case there isn't already one. Blots are not necesarilly always constructed with their create function. For example, when a user copy/pastes text (either from Quill or from another source) the copied HTML structure is passed to <code>Parchment.create()</code>. Parchment will skip calling create() and use the passed DOM Node, skipping to the next step.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Block</span></span> <span class="token keyword module">from</span> <span class="token string">"quill/blots/block"</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ClickableSpan</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">static</span> tagName <span class="token operator">=</span> <span class="token string">"span"</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> className <span class="token operator">=</span> <span class="token string">"ClickableSpan"</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">initialValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Allow the parent create function to give us a DOM Node</span>
        <span class="token comment">// The DOM Node will be based on the provided tagName and className.</span>
        <span class="token comment">// E.G. the Node is currently &#x3C;code class="ClickableSpan">{initialValue}&#x3C;/code></span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Set an attribute on the DOM Node.</span>
        node<span class="token punctuation">.</span><span class="token method function property-access">setAttribute</span><span class="token punctuation">(</span><span class="token string">"spellcheck"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Add an additional class</span>
        node<span class="token punctuation">.</span><span class="token property-access">classList</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">"otherClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Returning &#x3C;code class="ClickableSpan otherClass">{initialValue}&#x3C;/code></span>
        <span class="token keyword control-flow">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre>
<h4><code>constructor(domNode)</code></h4>
<p>Takes a DOM Node (often made in the <code>static create()</code> function, but not always) and creates a Blot from it.</p>
<p>This is the place to instantiate anything you might want to keep a reference to inside of a Blot. This is a good place to register an event listener or do anything you might normally do in a class constructor.</p>
<p>After the constructor is called, our Blot is still not in the DOM tree or in our Parchment document.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">ClickableSpan</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">domNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>domNode<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Bind our click handler to the class.</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">clickHandler</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">clickHandler</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        domNode<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">clickHandler</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">clickHandler</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"ClickableSpan was clicked. Blot: "</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
<h3>Registration</h3>
<p>Parchment keeps a registry of all of your Blots to simplify creation of them. Using this registry, Parchment exposes a function <code>Parchment.create()</code> which can create a Blot either from its name - using the Blot's <code>static create()</code> function - or from an existing DOM Node.</p>
<p>In order to use this registry you need register your Blots using <code>Parchment.register()</code>. With Quill its better to use <code>Quill.register()</code>, which will call <code>Parchment.register()</code> internally. For more details on Quill's <code>register</code> function see <a href="https://quilljs.com/docs/api/#register">Quill's excellent documentation</a>.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Quill</span></span> <span class="token keyword module">from</span> <span class="token string">"quill"</span><span class="token punctuation">;</span>

<span class="token comment">// Our Blot from earlier</span>
<span class="token keyword">class</span> <span class="token class-name">ClickableSpan</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>

<span class="token maybe-class-name">Quill</span><span class="token punctuation">.</span><span class="token method function property-access">register</span><span class="token punctuation">(</span><span class="token maybe-class-name">ClickableSpan</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4>Ensuring Blots have Unique Identifiers</h4>
<p>When creating a Blot with <code>Parchment.create(blotName)</code> and passing in a sting corresponding to a register <code>blotName</code>, you will always get the correct class instantiated. You could have 2 otherwise identical Blots with separate blotNames, and <code>Parchment.create(blotName)</code> will work correctly. However undefined behaviour can occur when using the other form of the method <code>Parchment.create(domNode)</code>.</p>
<p>While you might know the <code>blotName</code> when manually instantiating a Blot, there are instances where Quill needs to create a Blot from DOM Node, such as copy/pasting. In these cases your Blots need to be differentiated in one of 2 ways.</p>
<h4>By tagName</h4>
<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Inline</span></span> <span class="token keyword module">from</span> <span class="token string">"quill/blots/inline"</span><span class="token punctuation">;</span>

<span class="token comment">// Matches to &#x3C;strong ...>...&#x3C;/strong></span>
<span class="token keyword">class</span> <span class="token class-name">Bold</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> tagName <span class="token operator">=</span> <span class="token string">"strong"</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> blotName <span class="token operator">=</span> <span class="token string">"bold"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Matches to &#x3C;em ...>...&#x3C;/em></span>
<span class="token keyword">class</span> <span class="token class-name">Italic</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> tagName <span class="token operator">=</span> <span class="token string">"em"</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> blotName <span class="token operator">=</span> <span class="token string">"italic"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Matches to &#x3C;em ...>...&#x3C;/em></span>
<span class="token keyword">class</span> <span class="token class-name">AltItalic</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> tagName <span class="token operator">=</span> <span class="token string">"em"</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> blotName <span class="token operator">=</span> <span class="token string">"alt-italic"</span><span class="token punctuation">;</span>

    <span class="token comment">// Returns &#x3C;em class="alt-italic">...&#x3C;/em></span>
    <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span><span class="token property-access">classList</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">"Italic--alt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// ... Registration here</span>
</code></pre>
<p>In this case Parchment can easily distinguish between the <code>Bold</code> and <code>Italic</code> Blots when passed a DOM Node with the tag <code>em</code> or <code>strong</code>, but will be unable to make this distinction between <code>Italic</code> and <code>AltItalic</code>.</p>
<p>Currently the only other way for Parchment to tell the difference between these HTML structures is by setting a <code>static className</code> that matches an expected CSS class on the DOM Node passed in. If this is not provided you may find yourself manually creating an instance of a custom Blot through its <code>blotName</code> only to find an undo/redo or copy/paste action changes your Blot into a different type. This especially common when using a common <code>tagName</code> like <code>span</code> or <code>div</code>.</p>
<h4>By className</h4>
<pre class="language-js"><code class="language-js"><span class="token comment">// ... Bold and Italic Blot from the previous example.</span>

<span class="token comment">// Matches to &#x3C;em class="alt-italic">...&#x3C;/em></span>
<span class="token keyword">class</span> <span class="token class-name">AltItalic</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> tagName <span class="token operator">=</span> <span class="token string">"em"</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> blotName <span class="token operator">=</span> <span class="token string">"alt-italic"</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> className <span class="token operator">=</span> <span class="token string">"Italic--alt"</span><span class="token punctuation">;</span>

    <span class="token comment">// Returns &#x3C;em class="alt-italic">...&#x3C;/em></span>
<span class="token punctuation">}</span>
</code></pre>
<p>In this case the <code>static className</code> has been set. This means parent <code>ShadowBlot</code> will automatically apply the <code>className</code> to the element's DOM Node in the <code>static create()</code> function, and that Parchment will be able to differentiate between the 2 Blots.</p>
<hr>
<h3>Insertion and Attachment</h3>
<p>Now that a Blot is created we need to attach it both to Quill's document tree and the DOM tree. There are multiple ways to insert a Blot into the document.</p>
<h4><code>insertInto(parentBlot, refBlot)</code></h4>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> newBlot <span class="token operator">=</span> <span class="token maybe-class-name">Parchment</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token string">"someBlotName"</span><span class="token punctuation">,</span> initialBlotValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> parentBlot <span class="token operator">=</span> <span class="token comment">/* Get a reference to the desired parent Blot in some way */</span><span class="token punctuation">;</span>
newBlot<span class="token punctuation">.</span><span class="token method function property-access">insertInto</span><span class="token punctuation">(</span>parentBlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>This is the primary insertion method. The other insertion methods all call this one. It handles inserting a Blot into a parent Blot. By default this method will insert the <code>newBlot</code> at the end of the <code>parentBlot</code>'s children. Its DOM Node will also be appended to <code>parentBlot.domNode</code>.</p>
<p>If <code>refBlot</code> is passed as well, the <code>newBlot</code> will be inserted into the parent, except, instead of being inserted at the end of the <code>parentBlot</code>, the Blot will be inserted before <code>refBlot</code> and <code>newBlot.domNode</code> will be inserted before <code>refBlot.domNode</code>.</p>
<p>Additionally <code>newBlot.scroll</code> will be set at the end of this call using the <code>attach()</code> method. Details on that can be found later in this post.</p>
<h4><code>insertAt(index, name, value)</code></h4>
<p>This method is only available on Blots inheriting from <code>ContainerBlot</code>. A later post will cover <code>ContainerBlot</code> in more detail, but the most common of these Blots are <code>BlockBlot</code>, <code>InlineBlot</code>, and <code>ScrollBlot</code>. <code>EmbedBlot</code> and <code>TextBlot</code> do not inherit from <code>ContainerBlot</code>.</p>
<p>This method will call <code>Parchment.create()</code> for you with the passed <code>name</code>, and <code>value</code>. That newly created Blot will be inserted at the given <code>index</code>. If there nested containers at the given index, the call will be passed to container deepest in the tree and inserted there.</p>
<h4><code>insertBefore(childBlot, refBlot)</code></h4>
<p>This method is similar to <code>insertInto()</code> except reversed. Instead of a child inserting itself into a parent, the parent inserts the child into itself. Internally <code>insertInto()</code> is called and <code>refBlot</code> serves the same purpose here.</p>
<h4><code>attach()</code></h4>
<p><code>attach()</code> attaches the calling Blot's parent's <code>ScrollBlot</code> to itself as the <code>.scroll</code> property. If the calling Blot is a container, it will also call attach on all of its children after setting its own <code>ScrollBlot</code>.</p>
<hr>
<h3>Updates and Optimization</h3>
<p><em>Note: My understanding of this part of Parchment is still not complete. I will update it in future as I gain a better understanding. If anyone can help fill in the gaps, especially around how many times optimize() may called on children it would be much appreciated.</em></p>
<p>The <code>ScrollBlot</code> is the top level <code>ContainerBlot</code>. It holds all of the other Blots and is responsible for managing changes made inside of the <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Editable_content">contenteditable</a>. In order to stay in control of the editor's contents, the <code>ScrollBlot</code> sets up a <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver">MutationObserver</a>.</p>
<p>The <code>ScrollBlot</code> tracks the <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord">MutationRecords</a> and calls the <code>update()</code> method on every Blot who's DOM Node was the <code>target</code> of a <code>MutationRecord</code>. The relevant MutationRecords are passed as the parameter. Additionally a shared context is passed with every <code>update</code> call.</p>
<p>Then the <code>ScrollBlot</code> takes the same MutationRecords and calls the <code>optimize()</code> method on every affected Blot <em>as well as each of that Blot's children recursively to the bottom of the tree</em>. The releveant MutationRecords are passed in as well as the same shared context.</p>
<h4><code>update(mutations: MutationRecord[], sharedContext: Object)</code></h4>
<p>A Blot's update method is called with the MutationRecords targetting its DOM Node. A single context is shared among every Blot in a single update cycle.</p>
<p>There are 3 primary implementations of this method in different core Blots.</p>
<h5>ContainerBlot</h5>
<p>The <code>ContainerBlot</code> checks for changes that modify its direct children and will either:</p>
<ul>
  <li>Remove Blots from the document whose DOM Nodes have been deleted.</li>
  <li>Add Blots for DOM Nodes that have been added.</li>
</ul>
<p>If a new DOM Node is added that doesn't match any registered Blots, the container will remove that DOM Node and replace it with DOM Node corresponding to the <code>InlineBlot</code> (basically a plain text Blot) with the text content from the originally inserted DOM Node.</p>
<h5>TextBlot</h5>
<p>The <code>TextBlot</code> will replace its <code>value</code> with the new contents from the DOM Node as it exists in the DOM tree.</p>
<h5>EmbedBlot</h5>
<p>The <code>EmbedBlot</code> in parchment doesn't implement <code>update()</code>. Parchment's <code>EmbedBlot</code> and its descendant class in Quill <code>BlockEmbed</code> both have no control over Mutations of their child DOM Nodes.</p>
<p>Quill's other <code>EmbedBlot</code> descendant class <code>Embed</code> wraps its contents with 0-width space characters and sets <code>contenteditable=false</code> on the inner children. Inside of its <code>update()</code> method it checks if a MutationRecord would affect the <code>characterData</code> of these space characters. It it would, the Blot restores the original character data of the affected Node and inserts the change as text before or after itself.</p>
<h4><code>optimize(context)</code></h4>
<p>The <code>optimize()</code> method is called after an update pass completes. It is important to note that the <code>optimize</code> call should <strong><em>never</em></strong> change the length or value of the document. This is a good place to reduce the complexity of the document however.</p>
<p>To simplify, the <code>Delta</code> of a document should always be the same before or after an optimization pass.</p>
<p>By default Blots only cleanup leftover data from the update process, although a few Blots make some additional changes here.</p>
<h5>Container</h5>
<p>Empty <code>Containers</code> either remove themselves or add back their default child. Since the length of the document must be the same before and after the changes, the default child Blot must be a 0-length child. In the case of Quill's <code>Block</code> Blot, that child is a break.</p>
<h5>Inline and List</h5>
<p>Quill's <code>Inline</code> and <code>List</code> Blots both use optimize to simplify and make the DOM Tree more consistent.</p>
<p>As an example, the same Delta</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">"insert"</span><span class="token operator">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>
        <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">"bold"</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">"insert"</span><span class="token operator">:</span> <span class="token string">"bold italic"</span><span class="token punctuation">,</span>
        <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">"bold"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token property">"italic"</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre>
<p>could be be rendered in 3 different ways.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span>bold<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>em</span><span class="token punctuation">></span></span>bold italic<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span>
<span class="token comment">&#x3C;!-- or --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span>bold<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span>bold italic<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>em</span><span class="token punctuation">></span></span>
<span class="token comment">&#x3C;!-- or --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span>bold<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>em</span><span class="token punctuation">></span></span>bold italic<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span>
</code></pre>
<p>The Delta is the same, and this will generally be rendered mostly the same way, but the <a href="https://github.com/quilljs/quill/blob/develop/blots/inline.js#L31-L40">optimize implementation in FormatBlot</a> ensures that these items always render consistently.</p>
<hr>
<h3>Deletion and Detachment</h3>
<h4><code>remove()</code></h4>
<p>The <code>remove()</code> method is often the simplest way to wholly remove a Blot and its DOM Node(s). It removes the Blot's <code>.domNode</code> from the DOM tree, then calls <code>detach()</code>.</p>
<h4><code>removeChild(blot)</code></h4>
<p>This method is only available on <code>ContainerBlot</code> and its descendant classes. Removes the passed Blot from the calling Blot's <code>.children</code>.</p>
<h4><code>deleteAt()</code></h4>
<p>Delete the Blot or contents at the specified index. Calls <code>remove()</code> internally.</p>
<h4><code>detach()</code></h4>
<p>Remove all references Quill has to the Blot. This includes removing the Blot from its parent with <code>removeChild()</code>. Also calls <code>detach()</code> on any child Blot's if applicable.</p>
<hr>
<h2>Wrapping Up</h2>
<p>This concludes the primary life cycle. Additional Blot methods such as <code>replace()</code>, <code>replaceWith()</code>, <code>wrap()</code>, and <code>unwrap()</code> will be covered in the next article in this series, "Containers - Creating a Mutliline Block".</p>
]]></content:encoded>
        </item>
    </channel>
</rss>