<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Charron Dev Blog]]></title>
        <description><![CDATA[Charron Dev Blog]]></description>
        <link>https://charron.dev</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Fri, 13 Nov 2020 05:08:19 GMT</lastBuildDate>
        <atom:link href="https://charron.dev/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Self-Hosting Analytics with Plausible]]></title>
            <description><![CDATA[<p>I was recently looking for a cheap way to move a few sites off of Google Analytics
and began looking into various options, both cloud-hosted and self-hosted.</p><h2>Available Options</h2><p>Unfortunately most cloud-hosted options (that aren't google analytics)
are relatively pricy for what are essentially low traffic sites. After a bit of evalution
the best options seemed to be:</p><ul><li><a href="https://usefathom.com/pricing">Fathom (cloud)</a> - $14/month</li><li><a href="https://github.com/usefathom/fathom">Fathom (self-hosted)</a> - ~$5/month</li><li><a href="https://matomo.org/pricing/">Matamo (cloud)</a> - $30/month</li><li><a href="https://github.com/matomo-org/matomo">Matamo (self-hosted)</a> - $10/month (greater server requirements)</li><li><a href="https://plausible.io/">Plausible (cloud)</a> - $6/month</li><li><a href="https://github.com/plausible/analytics">Plausible (self-hosted)</a> - $5/month</li></ul><p>I ruled out the cloud hosted options for now, mostly because I wanted to be able to try a few of these out
quickly, without giving out any payment information.</p><p>Matamo's hosting requirements seemed larger than I wanted to go, and the additional features it has
over the other's seem more like clutter for my use cases.</p><p>That left me with Fathom &amp; Plausible.</p><h3>Ruling out Fathom</h3><p>I got Fathom up and running quick enough (they have 1-click digital ocean droplet),
but after setting it up, but it seemed to have a few major flaws:</p><ul><li>The analytics dashboard was completely public, with no UI I could find to:<ul><li>Restrict it.</li><li>Sign in.</li></ul></li><li>I passed through the initial setup, but I couldn't find how to see my siteID or script location again.</li></ul><p>This was enough friction that I tore down the instance and figured I'd give Plausible a shot.</p><h2>Installing Plausible</h2><p>I followed the <a href="https://docs.plausible.io/self-hosting/">self-hosted tutorial provided by Plausible</a>, but I ran into a couple minor issues while
following it so I figured I'd write this post outlining the whole process.</p><h2>Creating the Server</h2><p>I opted to use Digital Ocean for my hosting as I've used them for a few different projects before.
You should be able to use any other hosting provider as long as they support.</p><p>I created a new project, and setup a droplet with the following configuration:</p><ul><li>1 vCPU</li><li>1GB RAM / 25 GB Disk</li><li>Droplet - Docker 19.x on Ubuntu 20.04 from the Marketplace.</li><li>IPv6 &amp; monitoring enabled.</li><li>Attached my SSH key to the droplet.</li></ul><p>Once the droplet was spun up, I ssh'd into it.</p><pre class="language-shell"><code class="language-shell"><span class="token function">ssh</span> root@ip.of.my.droplet
</code></pre><h2>Installing Plausible</h2><pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /srv
<span class="token function">git</span> clone https://github.com/plausible/hosting plausible
<span class="token builtin class-name">cd</span> plausible

<span class="token comment"># Generate a random key.</span>
openssl rand -base64 <span class="token number">64</span>

<span class="token comment"># Edit the plausible config</span>
<span class="token function">nano</span> plausible-conf.env
</code></pre><p><strong>plausible-conf.env</strong></p><pre class="language-ini"><code class="language-ini"><span class="token constant">ADMIN_USER_EMAIL</span><span class="token attr-value"><span class="token punctuation">=</span>EMAIL</span>
<span class="token constant">ADMIN_USER_NAME</span><span class="token attr-value"><span class="token punctuation">=</span>USERNAME</span>
<span class="token constant">ADMIN_USER_PWD</span><span class="token attr-value"><span class="token punctuation">=</span>MY_PASSWORD</span>
<span class="token constant">BASE_URL</span><span class="token attr-value"><span class="token punctuation">=</span>https://stats.charron.dev</span>
<span class="token constant">SECRET_KEY_BASE</span><span class="token attr-value"><span class="token punctuation">=</span>RANDOM_KEY</span>
</code></pre><h2>Starting and accessing Plausible</h2><p>By default Plausible starts up on port 8000. It's expected that you will use some kind of reverse proxy.
I opted to use cloudflare as my reverse proxy and handle https.</p><p>Here I:</p><ul><li>Update Plausible to run on port 80.</li><li>Configure my DNS (run through cloudflare) to point to the droplet.</li><li>Block access on port 80 to go only go through cloudflare.</li></ul><h3>Update Plausible to run on port 80</h3><p><strong>docker-compose.yml</strong></p><pre class="language-yml"><code class="language-yml"><span class="token comment"># Before</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8000<span class="token punctuation">:</span><span class="token number">8000</span>

<span class="token comment"># After</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 80<span class="token punctuation">:</span><span class="token number">8000</span>
</code></pre><h3>Configuring DNS</h3><ul><li>Go to cloudflare DNS.</li><li>Add 2 records.</li></ul><pre class="language-shell"><code class="language-shell">A stats DROPLET_IPV4
AAAA stats DROPLET_IPV6
</code></pre><h3>Only allowing access through Cloudflare</h3><p>I configured <a href="https://wiki.ubuntu.com/UncomplicatedFirewall">UFW (Uncomplicated Firewall)</a> with some additional rules
following <a href="https://designinterventionsystems.com/plone-blog/configuring-the-ufw-firewall-to-allow-cloudflare-ip-addresses">this guide.</a></p><h2>Starting up the Server</h2><p>I made a small script to startup the server.</p><p><strong>/srv/start-plausible.sh</strong></p><pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /srv/plausible
docker-compose up --detached
</code></pre><p>Running this scripts starts up the server.</p><h2>Creating a SystemD service that runs on startup</h2><p>In the event of a restart I want the droplet to be able to start up the server automatically.</p><p>To do that I created a SystemD service.</p><p><strong>/etc/systemd/system/plausible.service</strong></p><pre class="language-ini"><code class="language-ini"><span class="token selector">[Unit]</span>
<span class="token constant">Description</span><span class="token attr-value"><span class="token punctuation">=</span>Plausible Analytics</span>
<span class="token constant">After</span><span class="token attr-value"><span class="token punctuation">=</span>network.target</span>
<span class="token constant">StartLimitIntervalSec</span><span class="token attr-value"><span class="token punctuation">=</span>0</span>

<span class="token selector">[Service]</span>
<span class="token constant">Type</span><span class="token attr-value"><span class="token punctuation">=</span>simple</span>
<span class="token constant">Restart</span><span class="token attr-value"><span class="token punctuation">=</span>always</span>
<span class="token constant">RestartSec</span><span class="token attr-value"><span class="token punctuation">=</span>1</span>
<span class="token constant">User</span><span class="token attr-value"><span class="token punctuation">=</span>root</span>
<span class="token constant">ExecStart</span><span class="token attr-value"><span class="token punctuation">=</span>/usr/bin/env /srv/plausible.sh</span>

<span class="token selector">[Install]</span>
<span class="token constant">WantedBy</span><span class="token attr-value"><span class="token punctuation">=</span>multi-user.target</span>
</code></pre><p>Then I enabled the service.</p><pre class="language-shell"><code class="language-shell"><span class="token comment"># Will run on startup</span>
systemctl <span class="token builtin class-name">enable</span> plausible

<span class="token comment"># Manually run it</span>
systemctl start plausible
</code></pre>]]></description>
            <link>/posts/self-hosting-analytics-with-plausible</link>
            <guid isPermaLink="false">self-hosting-analytics-with-plausible</guid>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Sun, 08 Nov 2020 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Speeding Up PHP in Docker w/ XDebug]]></title>
            <description><![CDATA[<p>I've been using Docker for my local environments at Vanilla since 2017.
It was a good way to ensure consistent &amp; reproducible developer environments
and was a marked improvement over what we were running before. We setup a single repository
with our shared environment (<a href="https://github.com/vanilla/vanilla-docker">vanilla-docker</a>) and
it spread across the company like wildfire.</p><p>The consistency was great, especially as we onboarded various junior developers over the years.
Unfortunately in 2018, Apple released MacOS High Sierra, sporting a new filesystem, <a href="https://en.wikipedia.org/wiki/Apple_File_System">APFS</a>.</p><p>This brought one single major regression to our developer environments.</p><h2>Docker for Mac was Slow!</h2><p>In the beginning, it was completely unusable.
<a href="https://github.com/docker/for-mac/issues/2582">Massive CPU spikes would freeze up our machines</a>, and response times were abysmal.</p><p>Things got a little better with introduction of a few options when mounting volumes: <a href="https://tkacz.pro/docker-volumes-cached-vs-delegated/">Delegated &amp; Cached</a></p><p>These along with various improvements in docker for mac made things better,
but we still struggled with performance for a long time.
It wasn't completely unusable, but we were seeing 3-4 second response times in docker,
where we would see 200-300ms response times in local development.</p><h2>Various Attempts at Fixing it</h2><p>I tried a few things to speed them up.</p><ul><li><a href="https://www.jeffgeerling.com/blog/2020/revisiting-docker-macs-performance-nfs-volumes">NFS Volumes</a> - This offered a 30-40% speed improvement but proved to difficult to roll across all of our developers due to the additional configuration required.</li><li><a href="https://docker-sync.readthedocs.io/en/latest/">docker-sync</a> - This tool gave essentially native performance but brought some major drawbacks. I tried 2 times, once in 2019, and again in the beginning of 2020 but these still seemed to hold true.<ul><li>It was very slow to startup. We have a lot of files and directories, and the initial sync would take 10+ minutes with no status indicator. Sometimes it would hang entirely and you'd have to reboot your machine, wipe the containers, and start again.</li><li>It would stop syncing at random times with no indication. You would notice when you changes suddenly stopped applying. Often the only fix was to wipe the volumes and redo the initial sync. This was particularly evident when checking out and older release and swithing back.</li><li>The configuration was complicated. Additional commands were required for startup, and the configuration file used a poorly documented syntax for marking excluded directories (a few <code>node_modules</code> directories in particular needed to be excluded in order for things to sync for even short periods of time).</li><li>Sometimes filesystem permissions wouldn't sync properly. This tended to happen with certain configuration files written by the app.</li></ul></li></ul><h2>The Real Problem - XDebug</h2><p>Many of our developers use XDebug extensively during development and testing.
A 2-5x slowdown while running a debug session is not unexpected.</p><p>Little did I know that just <strong><em>having the extension installed brings along some significant slowdown.</em></strong>
This is amplified in docker, where every System IO call brings with it a lot of overhead due to the virtualization in Docker for Mac.</p><p>Removing the XDebug extension had the local sites responding within expected times again.
XDebug is really useful though. I didn't want to give it up. Enabling it also couldn't be an onerous activity; I could use XDebug 10-20 times throughout a workday, and having to restart the container would be a chore.</p><h2>The Solution - 2 PHP-FPM Containers</h2><p>The final solution ended up being running 2 PHP-FPM containers.</p><ol><li>With a &quot;production-ish&quot; configuration. This one <em>without</em> XDebug and <em>with</em> a development configuration for OPCache.</li><li>With a debugging configuration. This one <em>with</em> XDebug.</li></ol><p>Nginx was already used to serve our PHP-FPM processes, so I just updated the configuration to route between them.</p><h2>The Configs</h2><p><a href="https://github.com/vanilla/vanilla-docker/pull/90">The Full PR is available here</a></p><p><strong>Nginx Server Config</strong></p><p>This is the bulk of the required configuration. It does the following:</p><ul><li>Define the 2 upstreams (php-fpm socket and php-fpm-xdebug socket).</li><li>Define a few mappings 2 allow switching between the 2 upstreams based on<ul><li>An XDebug cookie.</li><li>A query parameter of <code>?XDEBUG_SESSION_START</code></li><li>Many possible cookie values used by various browser plugins and IDEs.</li></ul></li></ul><pre class="language-nginx"><code class="language-nginx"><span class="token keyword">http</span> <span class="token punctuation">{</span>
    <span class="token comment"># ... Other top level config.</span>

    <span class="token comment"># Define available upstreams</span>
    <span class="token keyword">upstream</span> php<span class="token operator">-</span>fpm <span class="token punctuation">{</span>
        <span class="token keyword">server</span> unix<span class="token punctuation">:</span><span class="token operator">/</span>shared<span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>php<span class="token operator">-</span>fpm<span class="token punctuation">.</span>sock<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">upstream</span> php<span class="token operator">-</span>fpm<span class="token operator">-</span>xdebug <span class="token punctuation">{</span>
        <span class="token keyword">server</span> unix<span class="token punctuation">:</span><span class="token operator">/</span>shared<span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>php<span class="token operator">-</span>fpm<span class="token operator">-</span>xdebug<span class="token punctuation">.</span>sock<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment"># XDebug mappings.</span>
    <span class="token keyword">map</span> <span class="token variable">$arg_XDEBUG_SESSION_START</span> <span class="token variable">$session_arg_pass</span> <span class="token punctuation">{</span>
        default php<span class="token operator">-</span>fpm<span class="token punctuation">;</span>
        <span class="token number">1</span> php<span class="token operator">-</span>fpm<span class="token operator">-</span>xdebug<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">map</span> <span class="token variable">$cookie_XDEBUG_SESSION</span> <span class="token variable">$cookie_arg_pass</span> <span class="token punctuation">{</span>
        default <span class="token variable">$session_arg_pass</span><span class="token punctuation">;</span>
        xdebug php<span class="token operator">-</span>fpm<span class="token operator">-</span>xdebug<span class="token punctuation">;</span>
        <span class="token number">1</span> php<span class="token operator">-</span>fpm<span class="token operator">-</span>xdebug<span class="token punctuation">;</span>
        PHPSTORM php<span class="token operator">-</span>fpm<span class="token operator">-</span>xdebug<span class="token punctuation">;</span>
        XDEBUG_ECLIPSE php<span class="token operator">-</span>fpm<span class="token operator">-</span>xdebug<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">map</span> <span class="token variable">$arg_XDEBUG_PROFILE</span> <span class="token variable">$xdebug_test_pass</span> <span class="token punctuation">{</span>
        default <span class="token variable">$cookie_arg_pass</span><span class="token punctuation">;</span>
        <span class="token number">1</span> php<span class="token operator">-</span>fpm<span class="token operator">-</span>xdebug<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">server</span> <span class="token punctuation">{</span>

        <span class="token comment"># ... Rest of config</span>

        <span class="token keyword">location</span> <span class="token operator">~</span><span class="token operator">*</span> <span class="token string">&quot;/([^./]+)/index\.php(/|$)&quot;</span> <span class="token punctuation">{</span>
            <span class="token comment"># ... Other FastCGI configs.</span>
            <span class="token keyword">fastcgi_pass</span> <span class="token variable">$xdebug_test_pass</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment"># ... Rest of config</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><strong>Debug PHP config</strong></p><pre class="language-ini"><code class="language-ini"><span class="token selector">[www]</span>
<span class="token constant">listen</span> <span class="token attr-value"><span class="token punctuation">=</span> /shared/var/run/php-fpm-xdebug.sock</span>
<span class="token constant">listen.owner</span> <span class="token attr-value"><span class="token punctuation">=</span> www-data</span>
<span class="token constant">listen.group</span> <span class="token attr-value"><span class="token punctuation">=</span> www-data</span>
<span class="token constant">listen.mode</span> <span class="token attr-value"><span class="token punctuation">=</span> 0660</span>

<span class="token selector">[xdebug]</span>
<span class="token constant">xdebug.idekey</span> <span class="token attr-value"><span class="token punctuation">=</span> PHPSTORM</span>
<span class="token constant">xdebug.profiler_output_dir</span> <span class="token attr-value"><span class="token punctuation">=</span> /var/log/php-fpm</span>

<span class="token constant">xdebug.remote_enable</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span>
<span class="token constant">xdebug.remote_host</span> <span class="token attr-value"><span class="token punctuation">=</span> 192.0.2.1</span>
<span class="token constant">xdebug.profiler_enable_trigger</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span>

<span class="token comment"># Name the profiles with the url.</span>
<span class="token constant">xdebug.profiler_output_name</span> <span class="token attr-value"><span class="token punctuation">=</span> %R.cachegrind.out</span>

<span class="token comment">; One second only. Fast expiry.</span>
<span class="token comment">; Keep requesting the cookie if you want it.</span>
<span class="token constant">xdebug.remote_cookie_expire_time</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span>
</code></pre><p><strong>&quot;Production-ish&quot; PHP config</strong></p><pre class="language-ini"><code class="language-ini"><span class="token selector">[www]</span>
<span class="token constant">listen</span> <span class="token attr-value"><span class="token punctuation">=</span> /shared/var/run/php-fpm.sock</span>

<span class="token constant">listen.owner</span> <span class="token attr-value"><span class="token punctuation">=</span> www-data</span>
<span class="token constant">listen.group</span> <span class="token attr-value"><span class="token punctuation">=</span> www-data</span>
<span class="token constant">listen.mode</span> <span class="token attr-value"><span class="token punctuation">=</span> 0660</span>

<span class="token selector">[opcache]</span>
<span class="token constant">opcache.enable</span><span class="token attr-value"><span class="token punctuation">=</span>1</span>
<span class="token comment">; 0 means it will check on every request</span>
<span class="token comment">; 0 is irrelevant if opcache.validate_timestamps=0 which is desirable in production</span>
<span class="token constant">opcache.revalidate_freq</span><span class="token attr-value"><span class="token punctuation">=</span>0</span>
<span class="token constant">opcache.validate_timestamps</span><span class="token attr-value"><span class="token punctuation">=</span>1</span>
<span class="token constant">opcache.max_accelerated_files</span><span class="token attr-value"><span class="token punctuation">=</span>100000</span>
<span class="token constant">opcache.memory_consumption</span><span class="token attr-value"><span class="token punctuation">=</span>500</span>
<span class="token constant">opcache.max_wasted_percentage</span><span class="token attr-value"><span class="token punctuation">=</span>20</span>
<span class="token constant">opcache.interned_strings_buffer</span><span class="token attr-value"><span class="token punctuation">=</span>16</span>
<span class="token constant">opcache.fast_shutdown</span><span class="token attr-value"><span class="token punctuation">=</span>1</span>
</code></pre>]]></description>
            <link>/posts/speeding-up-php-in-docker-xdebug</link>
            <guid isPermaLink="false">speeding-up-php-in-docker-xdebug</guid>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Fri, 06 Nov 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Hello world]]></title>
            <description><![CDATA[<p>I've been meening to start my own blog post for some time. I've written a few posts on <a href="https://dev.to">dev.to</a> before
but I decided that if I was going to keep doing it, I would it would be best to have it on my own domain.</p><p>I'm aiming to write frequently, at least once a week until this Covid-19 pandemic is over.</p><p>This is mostly intended as a bit of a future journal for myself, but hopefully anyone else reading it can get some
utility out of my programming experiences.</p>]]></description>
            <link>/posts/hello-world</link>
            <guid isPermaLink="false">hello-world</guid>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Thu, 01 Oct 2020 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Getting to know QuillJS (Parchment, Blots, and Lifecycle)]]></title>
            <description><![CDATA[<p><em>Note: This series is targeted at people trying to gain an advanced understanding of Quill and Parchment. If you're just trying to get started with an easy, well-featured editor, it might be good idea to check out Quill's <a href="https://quilljs.com/docs/quickstart/">Quickstart Guide</a> or <a href="https://quilljs.com/guides/cloning-medium-with-parchment/">Cloning Medium with Parchment guide</a>.</em></p><h2>What is Quill?</h2><p><a href="https://quilljs.com/">QuillJS</a> is a modern rich text editor built for compatibility and extensibility. It was created by <a href="https://twitter.com/jhchen">Jason Chen</a> and <a href="https://twitter.com/byronmilligan">Byron Milligan</a> and open sourced by Salesforce. Since then it has been used by hundreds of other companies and people to build fast, reliable, and rich editing experiences in a browser.</p><p>Quill is a mostly batteries-included library with support for most common formatting options such <strong>bold</strong>, <em>italics</em>, <del>strike</del>, underline, custom fonts and colors, dividers, headings, <code>inline code</code>, code blocks, blockquotes, lists (bulleted, numbered, checkboxes), formulas, images, as well as embedded videos.</p><h2>What more could you want?</h2><p>A few months ago, the company I work for, <a href="https://github.com/vanilla">Vanilla Forums</a> began planning a new editor for our product. Our current editor supported numerous different text entry formats, including</p><ul><li>Markdown</li><li>BBCode</li><li>HTML</li><li>WYSIWYG HTML (using an iFrame to render the contents)</li></ul><p>We had different parsers, renderers, and frontend javascript for all of these formats, so we set out to create new editor to replace them all with a single new unified, rich editing experience.</p><p>We chose Quill as the base of our new editor due to its browser compatibility and extensibility, but quickly realized that it was not going to have all of the functionality we needed out of the box. Notably lacking was multiline block type structures like block-quotes (missing nesting and multiline support). We have some other formatting items such as Spoilers with similar requirements.</p><p>We also had some extended functionality to add in the form of rich link embeds, and special formatting options and functionality for images and videos.</p><p>So I set to out to learn <a href="https://github.com/quilljs/quill">Quill</a> and its underlying data library <a href="https://github.com/quilljs/parchment">Parchment</a> inside and out. This series of posts represents my understanding of Parchment and QuillJS. I am not a maintainer of the project, so if something is incorrect here, I encourage you to point it out.</p><h2>Data Formats</h2><p>Quill has 2 forms of data-formats. <a href="https://github.com/quilljs/parchment">Parchment</a> (Blots), and <a href="https://github.com/quilljs/delta">Delta</a>.</p><p>Parchment is used as an in-memory data structure made up primarily of LinkedLists in a tree structure. Its tree of Blots should map 1:1 with the browser's tree of DOM Nodes.</p><p>Deltas are used to store persistant data from the editor and takes the form of a relatively flat JSON array. Each item in the array represents an operation, that could affect or represent multiple DOM Nodes or Blots. This is the form of data that you will generally store in your Database or persistent storage. It is also used to represent diffence between one state and another.</p><h2>What is a Blot?</h2><p>Blots are the building blocks of a Parchment document. They are one of the most powerful abstractions of Quill, as they allow the editor and API users to consume and modify the document's contents without needing to touch the DOM directly. Blots have a simpler and more expressive interface than a DOM Node which can make consuming and creating them easier to reason about.</p><p>Each Blot must implement the interface <code>Blot</code> and every existing Blot in Quill and Parchment is a class that inherits from <code>ShadowBlot</code>.</p><p>In order to make it possible to look around the document from the perspective of a Blot, every Blot has the following references</p><ul><li><code>.parent</code> - The Blot that contains this Blot. If this Blot is the top level Blot, <code>parent</code> will be <code>null</code>.</li><li><code>.prev</code> - The previous sibling Blot in the tree from this Blot's parent. If this iBlotis the first child directly under its <code>parent</code>, <code>prev</code> will be <code>null</code>.</li><li><code>.next</code> - The next sibling Blot in the tree form this Blot's parent. If this Blot is the last child directly under its <code>parent</code>, <code>next</code> will be <code>null</code>.</li><li><code>.scroll</code> - The scroll is the top level Blot in Parchment's data structure. More info about the Scroll Blot will be provided later.</li><li><code>.domNode</code> - Since Parchment's tree maps 1:1 with the DOM's tree, each Blot has access to the <code>Node</code> it represents. Additionally these DOM Nodes will have a reference to their Blot (with <code>.__blot</code>).</li></ul><h2>The Blot Lifecycle</h2><p>Each Blot has several &quot;lifecycle methods&quot; that you can override to run code at particular times in the process. You generally will still want to call <code>super.&lt;OVERRIDEN_METHOD&gt;</code> before or after inserting your own custom code though. This component lifecycle is broken up into multiple sections.</p><h3>Creation</h3><p>There are multiple steps in properly creating a Blot, but these can all be replaced with calling <code>Parchment.create()</code></p><h4><code>Blot.create()</code></h4><p>Each Blot has a <code>static create()</code> function that creates a DOM Node from an initial value. This is also good place to set initial values on a DOM Node that are unrelated to the actual Blot instance.</p><p>The returned DOM Node is not actually attached anywhere, and the Blot is still not yet created. This is because Blots are created <em>from</em> a DOM Node, so this function puts one together in case there isn't already one. Blots are not necesarilly always constructed with their create function. For example, when a user copy/pastes text (either from Quill or from another source) the copied HTML structure is passed to <code>Parchment.create()</code>. Parchment will skip calling create() and use the passed DOM Node, skipping to the next step.</p><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token maybe-class-name">Block</span> <span class="token keyword module">from</span> <span class="token string">&quot;quill/blots/block&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ClickableSpan</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">static</span> tagName <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> className <span class="token operator">=</span> <span class="token string">&quot;ClickableSpan&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">initialValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Allow the parent create function to give us a DOM Node</span>
        <span class="token comment">// The DOM Node will be based on the provided tagName and className.</span>
        <span class="token comment">// E.G. the Node is currently &lt;code class=&quot;ClickableSpan&quot;&gt;{initialValue}&lt;/code&gt;</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Set an attribute on the DOM Node.</span>
        node<span class="token punctuation">.</span><span class="token method function property-access">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;spellcheck&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Add an additional class</span>
        node<span class="token punctuation">.</span><span class="token property-access">classList</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">&quot;otherClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Returning &lt;code class=&quot;ClickableSpan otherClass&quot;&gt;{initialValue}&lt;/code&gt;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><h4><code>constructor(domNode)</code></h4><p>Takes a DOM Node (often made in the <code>static create()</code> function, but not always) and creates a Blot from it.</p><p>This is the place to instantiate anything you might want to keep a reference to inside of a Blot. This is a good place to register an event listener or do anything you might normally do in a class constructor.</p><p>After the constructor is called, our Blot is still not in the DOM tree or in our Parchment document.</p><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">ClickableSpan</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">domNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>domNode<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Bind our click handler to the class.</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">clickHandler</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">clickHandler</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        domNode<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">clickHandler</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">clickHandler</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&quot;ClickableSpan was clicked. Blot: &quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><hr /><h3>Registration</h3><p>Parchment keeps a registry of all of your Blots to simplify creation of them. Using this registry, Parchment exposes a function <code>Parchment.create()</code> which can create a Blot either from its name - using the Blot's <code>static create()</code> function - or from an existing DOM Node.</p><p>In order to use this registry you need register your Blots using <code>Parchment.register()</code>. With Quill its better to use <code>Quill.register()</code>, which will call <code>Parchment.register()</code> internally. For more details on Quill's <code>register</code> function see <a href="https://quilljs.com/docs/api/#register">Quill's excellent documentation</a>.</p><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token maybe-class-name">Quill</span> <span class="token keyword module">from</span> <span class="token string">&quot;quill&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Our Blot from earlier</span>
<span class="token keyword">class</span> <span class="token class-name">ClickableSpan</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>

<span class="token maybe-class-name">Quill</span><span class="token punctuation">.</span><span class="token method function property-access">register</span><span class="token punctuation">(</span><span class="token maybe-class-name">ClickableSpan</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h4>Ensuring Blots have Unique Identifiers</h4><p>When creating a Blot with <code>Parchment.create(blotName)</code> and passing in a sting corresponding to a register <code>blotName</code>, you will always get the correct class instantiated. You could have 2 otherwise identical Blots with separate blotNames, and <code>Parchment.create(blotName)</code> will work correctly. However undefined behaviour can occur when using the other form of the method <code>Parchment.create(domNode)</code>.</p><p>While you might know the <code>blotName</code> when manually instantiating a Blot, there are instances where Quill needs to create a Blot from DOM Node, such as copy/pasting. In these cases your Blots need to be differentiated in one of 2 ways.</p><h4>By tagName</h4><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token maybe-class-name">Inline</span> <span class="token keyword module">from</span> <span class="token string">&quot;quill/blots/inline&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Matches to &lt;strong ...&gt;...&lt;/strong&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Bold</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> tagName <span class="token operator">=</span> <span class="token string">&quot;strong&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> blotName <span class="token operator">=</span> <span class="token string">&quot;bold&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Matches to &lt;em ...&gt;...&lt;/em&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Italic</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> tagName <span class="token operator">=</span> <span class="token string">&quot;em&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> blotName <span class="token operator">=</span> <span class="token string">&quot;italic&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Matches to &lt;em ...&gt;...&lt;/em&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">AltItalic</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> tagName <span class="token operator">=</span> <span class="token string">&quot;em&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> blotName <span class="token operator">=</span> <span class="token string">&quot;alt-italic&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// Returns &lt;em class=&quot;alt-italic&quot;&gt;...&lt;/em&gt;</span>
    <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span><span class="token property-access">classList</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">&quot;Italic--alt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// ... Registration here</span>
</code></pre><p>In this case Parchment can easily distinguish between the <code>Bold</code> and <code>Italic</code> Blots when passed a DOM Node with the tag <code>em</code> or <code>strong</code>, but will be unable to make this distinction between <code>Italic</code> and <code>AltItalic</code>.</p><p>Currently the only other way for Parchment to tell the difference between these HTML structures is by setting a <code>static className</code> that matches an expected CSS class on the DOM Node passed in. If this is not provided you may find yourself manually creating an instance of a custom Blot through its <code>blotName</code> only to find an undo/redo or copy/paste action changes your Blot into a different type. This especially common when using a common <code>tagName</code> like <code>span</code> or <code>div</code>.</p><h4>By className</h4><pre class="language-js"><code class="language-js"><span class="token comment">// ... Bold and Italic Blot from the previous example.</span>

<span class="token comment">// Matches to &lt;em class=&quot;alt-italic&quot;&gt;...&lt;/em&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">AltItalic</span> <span class="token keyword">extends</span> <span class="token class-name">Inline</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> tagName <span class="token operator">=</span> <span class="token string">&quot;em&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> blotName <span class="token operator">=</span> <span class="token string">&quot;alt-italic&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> className <span class="token operator">=</span> <span class="token string">&quot;Italic--alt&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// Returns &lt;em class=&quot;alt-italic&quot;&gt;...&lt;/em&gt;</span>
<span class="token punctuation">}</span>
</code></pre><p>In this case the <code>static className</code> has been set. This means parent <code>ShadowBlot</code> will automatically apply the <code>className</code> to the element's DOM Node in the <code>static create()</code> function, and that Parchment will be able to differentiate between the 2 Blots.</p><hr /><h3>Insertion and Attachment</h3><p>Now that a Blot is created we need to attach it both to Quill's document tree and the DOM tree. There are multiple ways to insert a Blot into the document.</p><h4><code>insertInto(parentBlot, refBlot)</code></h4><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> newBlot <span class="token operator">=</span> <span class="token maybe-class-name">Parchment</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token string">&quot;someBlotName&quot;</span><span class="token punctuation">,</span> initialBlotValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> parentBlot <span class="token operator">=</span> <span class="token comment">/* Get a reference to the desired parent Blot in some way */</span><span class="token punctuation">;</span>
newBlot<span class="token punctuation">.</span><span class="token method function property-access">insertInto</span><span class="token punctuation">(</span>parentBlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>This is the primary insertion method. The other insertion methods all call this one. It handles inserting a Blot into a parent Blot. By default this method will insert the <code>newBlot</code> at the end of the <code>parentBlot</code>'s children. Its DOM Node will also be appended to <code>parentBlot.domNode</code>.</p><p>If <code>refBlot</code> is passed as well, the <code>newBlot</code> will be inserted into the parent, except, instead of being inserted at the end of the <code>parentBlot</code>, the Blot will be inserted before <code>refBlot</code> and <code>newBlot.domNode</code> will be inserted before <code>refBlot.domNode</code>.</p><p>Additionally <code>newBlot.scroll</code> will be set at the end of this call using the <code>attach()</code> method. Details on that can be found later in this post.</p><h4><code>insertAt(index, name, value)</code></h4><p>This method is only available on Blots inheriting from <code>ContainerBlot</code>. A later post will cover <code>ContainerBlot</code> in more detail, but the most common of these Blots are <code>BlockBlot</code>, <code>InlineBlot</code>, and <code>ScrollBlot</code>. <code>EmbedBlot</code> and <code>TextBlot</code> do not inherit from <code>ContainerBlot</code>.</p><p>This method will call <code>Parchment.create()</code> for you with the passed <code>name</code>, and <code>value</code>. That newly created Blot will be inserted at the given <code>index</code>. If there nested containers at the given index, the call will be passed to container deepest in the tree and inserted there.</p><h4><code>insertBefore(childBlot, refBlot)</code></h4><p>This method is similar to <code>insertInto()</code> except reversed. Instead of a child inserting itself into a parent, the parent inserts the child into itself. Internally <code>insertInto()</code> is called and <code>refBlot</code> serves the same purpose here.</p><h4><code>attach()</code></h4><p><code>attach()</code> attaches the calling Blot's parent's <code>ScrollBlot</code> to itself as the <code>.scroll</code> property. If the calling Blot is a container, it will also call attach on all of its children after setting its own <code>ScrollBlot</code>.</p><hr /><h3>Updates and Optimization</h3><p><em>Note: My understanding of this part of Parchment is still not complete. I will update it in future as I gain a better understanding. If anyone can help fill in the gaps, especially around how many times optimize() may called on children it would be much appreciated.</em></p><p>The <code>ScrollBlot</code> is the top level <code>ContainerBlot</code>. It holds all of the other Blots and is responsible for managing changes made inside of the <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Editable_content">contenteditable</a>. In order to stay in control of the editor's contents, the <code>ScrollBlot</code> sets up a <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver">MutationObserver</a>.</p><p>The <code>ScrollBlot</code> tracks the <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord">MutationRecords</a> and calls the <code>update()</code> method on every Blot who's DOM Node was the <code>target</code> of a <code>MutationRecord</code>. The relevant MutationRecords are passed as the parameter. Additionally a shared context is passed with every <code>update</code> call.</p><p>Then the <code>ScrollBlot</code> takes the same MutationRecords and calls the <code>optimize()</code> method on every affected Blot <em>as well as each of that Blot's children recursively to the bottom of the tree</em>. The releveant MutationRecords are passed in as well as the same shared context.</p><h4><code>update(mutations: MutationRecord[], sharedContext: Object)</code></h4><p>A Blot's update method is called with the MutationRecords targetting its DOM Node. A single context is shared among every Blot in a single update cycle.</p><p>There are 3 primary implementations of this method in different core Blots.</p><h5>ContainerBlot</h5><p>The <code>ContainerBlot</code> checks for changes that modify its direct children and will either:</p><ul><li>Remove Blots from the document whose DOM Nodes have been deleted.</li><li>Add Blots for DOM Nodes that have been added.</li></ul><p>If a new DOM Node is added that doesn't match any registered Blots, the container will remove that DOM Node and replace it with DOM Node corresponding to the <code>InlineBlot</code> (basically a plain text Blot) with the text content from the originally inserted DOM Node.</p><h5>TextBlot</h5><p>The <code>TextBlot</code> will replace its <code>value</code> with the new contents from the DOM Node as it exists in the DOM tree.</p><h5>EmbedBlot</h5><p>The <code>EmbedBlot</code> in parchment doesn't implement <code>update()</code>. Parchment's <code>EmbedBlot</code> and its descendant class in Quill <code>BlockEmbed</code> both have no control over Mutations of their child DOM Nodes.</p><p>Quill's other <code>EmbedBlot</code> descendant class <code>Embed</code> wraps its contents with 0-width space characters and sets <code>contenteditable=false</code> on the inner children. Inside of its <code>update()</code> method it checks if a MutationRecord would affect the <code>characterData</code> of these space characters. It it would, the Blot restores the original character data of the affected Node and inserts the change as text before or after itself.</p><h4><code>optimize(context)</code></h4><p>The <code>optimize()</code> method is called after an update pass completes. It is important to note that the <code>optimize</code> call should <strong><em>never</em></strong> change the length or value of the document. This is a good place to reduce the complexity of the document however.</p><p>To simplify, the <code>Delta</code> of a document should always be the same before or after an optimization pass.</p><p>By default Blots only cleanup leftover data from the update process, although a few Blots make some additional changes here.</p><h5>Container</h5><p>Empty <code>Containers</code> either remove themselves or add back their default child. Since the length of the document must be the same before and after the changes, the default child Blot must be a 0-length child. In the case of Quill's <code>Block</code> Blot, that child is a break.</p><h5>Inline and List</h5><p>Quill's <code>Inline</code> and <code>List</code> Blots both use optimize to simplify and make the DOM Tree more consistent.</p><p>As an example, the same Delta</p><pre class="language-json"><code class="language-json"><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;insert&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bold&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;attributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;bold&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;insert&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bold italic&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;attributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;bold&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token property">&quot;italic&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><p>could be be rendered in 3 different ways.</p><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>bold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>bold italic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- or --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>bold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>bold italic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- or --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>bold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>bold italic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>
</code></pre><p>The Delta is the same, and this will generally be rendered mostly the same way, but the <a href="https://github.com/quilljs/quill/blob/develop/blots/inline.js#L31-L40">optimize implementation in FormatBlot</a> ensures that these items always render consistently.</p><hr /><h3>Deletion and Detachment</h3><h4><code>remove()</code></h4><p>The <code>remove()</code> method is often the simplest way to wholly remove a Blot and its DOM Node(s). It removes the Blot's <code>.domNode</code> from the DOM tree, then calls <code>detach()</code>.</p><h4><code>removeChild(blot)</code></h4><p>This method is only available on <code>ContainerBlot</code> and its descendant classes. Removes the passed Blot from the calling Blot's <code>.children</code>.</p><h4><code>deleteAt()</code></h4><p>Delete the Blot or contents at the specified index. Calls <code>remove()</code> internally.</p><h4><code>detach()</code></h4><p>Remove all references Quill has to the Blot. This includes removing the Blot from its parent with <code>removeChild()</code>. Also calls <code>detach()</code> on any child Blot's if applicable.</p><hr /><h2>Wrapping Up</h2><p>This concludes the primary life cycle. Additional Blot methods such as <code>replace()</code>, <code>replaceWith()</code>, <code>wrap()</code>, and <code>unwrap()</code> will be covered in the next article in this series, &quot;Containers - Creating a Mutliline Block&quot;.</p>]]></description>
            <link>/posts/getting-to-know-quilljs</link>
            <guid isPermaLink="false">getting-to-know-quilljs</guid>
            <dc:creator><![CDATA[Adam Charron]]></dc:creator>
            <pubDate>Sun, 04 Oct 2020 04:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>